{
	"Test : Chai : Express : Module": {
		"prefix": "ccTest_Chai_Express_Module",
		"body": [
			"var chai = require('chai');",
			"var expect = chai.expect;",
			"",
			"var ${1:__ModuleName__}Module = require('../../../modules/${1:__ModuleName__}/${1:__ModuleName__}.module');",
			"",
			"describe('${1:__ModuleName__} Module', () => {",
			"\tdescribe('${1:__ModuleName__}.module file', () => {",
			"\t\tit('should confirm ${1:__ModuleName__}Module function exist', () => {",
			"\t\t\texpect(${1:__ModuleName__}Module).to.be.a('function');",
			"\t\t});",
			"\t\tit('should confirm ${1:__ModuleName__}Module function returns an object', () => {",
			"\t\t\texpect(${1:__ModuleName__}Module()).to.be.a('object');",
			"\t\t});",
			"\t\tit('should confirm ${1:__ModuleName__}Controller function exist', () => {",
			"\t\t\texpect(${1:__ModuleName__}Module().${1:__ModuleName__}Controller).to.be.a('function');",
			"\t\t});",
			"\t\tit('should confirm ${1:__ModuleName__}Middleware object exist', () => {",
			"\t\t\texpect(${1:__ModuleName__}Module().${1:__ModuleName__}Middleware).to.be.a('object');",
			"\t\t});",
			"\t\tit('should confirm ${1:__ModuleName__}Service object exist', () => {",
			"\t\t\texpect(${1:__ModuleName__}Module().${1:__ModuleName__}Service).to.be.a('object');",
			"\t\t});",
			"\t\tit('should confirm ${1:__ModuleName__}Model function exist', () => {",
			"\t\t\texpect(${1:__ModuleName__}Module().${1:__ModuleName__}Model).to.be.a('function');",
			"\t\t});",
			"\t});",
			"});",
			""
		],
		"description": "Create Express Module Test Suit"
	},
	"Test : Chai : Express : Service": {
		"prefix": "ccTest_Chai_Express_Service",
		"body": [
			"'use strict';",
			"",
			"var chai = require('chai');",
			"var expect = chai.expect;",
			"var sinon = require('sinon');",
			"require('sinon-mongoose');",
			"var mongoose = require('mongoose');",
			"var ${1:__ModuleName__}Module = require('../../../Modules/${1:__ModuleName__}/${1:__ModuleName__}.module')();",
			"var ${1:__ModuleName__}Model = ${1:__ModuleName__}Module.${1:__ModuleName__}Model;",
			"var ${1:__ModuleName__}Service = ${1:__ModuleName__}Module.${1:__ModuleName__}Service;",
			"var Fixtures = require('../../Fixtures/Fixtures');",
			"var ${1:__ModuleName__}Fixture = Fixtures.${1:__ModuleName__}Fixture;",
			"var ErrorFixture = Fixtures.ErrorFixture;",
			"var ${1:__ModuleName__}ModelMock;",
			"",
			"describe('${1:__ModuleName__} Service', () => {",
			"\tbeforeEach(function() {",
			"\t\t${1:__ModuleName__}ModelMock = sinon.mock(${1:__ModuleName__}Model);",
			"\t});",
			"\tafterEach(function() {",
			"\t\t${1:__ModuleName__}ModelMock.restore();",
			"\t\tmongoose.models = {};",
			"\t\tmongoose.modelSchemas = {};",
			"\t\treturn mongoose.connection.close();",
			"\t});",
			"",
			"\tdescribe('create${1:__ModuleName__}', () => {",
			"\t\tvar new${1:__ModuleName__}, expectedCreated${1:__ModuleName__}, expectedError;",
			"\t\tit('should successfully create new ${1:__ModuleName__}', () => {",
			"\t\t\tnew${1:__ModuleName__} = ${1:__ModuleName__}Fixture.new${1:__ModuleName__};",
			"\t\t\texpectedCreated${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('create')",
			"\t\t\t\t.withArgs(new${1:__ModuleName__})",
			"\t\t\t\t.resolves(expectedCreated${1:__ModuleName__});",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.create${1:__ModuleName__}(new${1:__ModuleName__}).then(function(data) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(data).to.deep.equal(expectedCreated${1:__ModuleName__});",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while creating ${1:__ModuleName__}', () => {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"\t\t\tnew${1:__ModuleName__} = ${1:__ModuleName__}Fixture.new${1:__ModuleName__};",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('create')",
			"\t\t\t\t.withArgs(new${1:__ModuleName__})",
			"\t\t\t\t.rejects(expectedError);",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.create${1:__ModuleName__}(new${1:__ModuleName__}).catch(function(error) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('fetch${1:__ModuleName__}s', () => {",
			"\t\tvar expected${1:__ModuleName__}s, expectedError;",
			"\t\tit('should successfully fetch all ${1:__ModuleName__}s', () => {",
			"\t\t\texpected${1:__ModuleName__}s = ${1:__ModuleName__}Fixture.${1:__ModuleName__}s;",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('find')",
			"\t\t\t\t.withArgs({})",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.resolves(expected${1:__ModuleName__}s);",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.fetch${1:__ModuleName__}s().then(function(data) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(data).to.deep.equal(expected${1:__ModuleName__}s);",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while fetching all ${1:__ModuleName__}s', () => {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('find')",
			"\t\t\t\t.withArgs({})",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.rejects(expectedError);",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.fetch${1:__ModuleName__}s().catch(function(error) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('fetch${1:__ModuleName__}ById', function() {",
			"\t\tvar expectedFetched${1:__ModuleName__}, ${1:__ModuleName__}Id, expectedError;",
			"",
			"\t\tit('should successfully fetch the ${1:__ModuleName__} by id', function() {",
			"\t\t\texpectedFetched${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"\t\t\t${1:__ModuleName__}Id = expectedFetched${1:__ModuleName__}._id;",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('findById')",
			"\t\t\t\t.withArgs(${1:__ModuleName__}Id)",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.resolves(expectedFetched${1:__ModuleName__});",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.fetch${1:__ModuleName__}ById(${1:__ModuleName__}Id).then(function(data) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(data).to.deep.equal(expectedFetched${1:__ModuleName__});",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while fetching ${1:__ModuleName__} by Id', function() {",
			"\t\t\t${1:__ModuleName__}Id = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__}._id;",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('findById')",
			"\t\t\t\t.withArgs(${1:__ModuleName__}Id)",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.rejects(expectedError);",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.fetch${1:__ModuleName__}ById(${1:__ModuleName__}Id).catch(function(error) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('fetch ${1:__ModuleName__} By ${2:__params__}', function() {",
			"\t\tvar expectedFetched${1:__ModuleName__}, ${2:__params__}, expectedError;",
			"",
			"\t\tit('should successfully fetch the ${1:__ModuleName__} by ${2:__params__}', function() {",
			"\t\t\texpectedFetched${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"\t\t\t${2:__params__} = expectedFetched${1:__ModuleName__}.${2:__params__};",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('find')",
			"\t\t\t\t.withArgs(${2:__params__})",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.resolves(expectedFetched${1:__ModuleName__});",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.fetch${1:__ModuleName__}ByParams(${2:__params__}).then(function(",
			"\t\t\t\tdata,",
			"\t\t\t) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(data).to.deep.equal(expectedFetched${1:__ModuleName__});",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while fetching ${1:__ModuleName__} by Id', function() {",
			"\t\t\texpectedFetched${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"\t\t\t${2:__params__} = expectedFetched${1:__ModuleName__}.${2:__params__};",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('find')",
			"\t\t\t\t.withArgs(${2:__params__})",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.rejects(expectedError);",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.fetch${1:__ModuleName__}ByParams(${2:__params__}).catch(function(",
			"\t\t\t\terror,",
			"\t\t\t) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('update${1:__ModuleName__}', function() {",
			"\t\tvar existing${1:__ModuleName__}, expectedModified${1:__ModuleName__}, expectedError;",
			"",
			"\t\tit('should successfully update ${1:__ModuleName__}', function() {",
			"\t\t\texpectedModified${1:__ModuleName__} = ${1:__ModuleName__}Fixture.modified${1:__ModuleName__};",
			"\t\t\texisting${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('findByIdAndUpdate')",
			"\t\t\t\t.withArgs(existing${1:__ModuleName__}._id, existing${1:__ModuleName__}, { new: true })",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.resolves(expectedModified${1:__ModuleName__});",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.update${1:__ModuleName__}(existing${1:__ModuleName__}._id, existing${1:__ModuleName__}).then(",
			"\t\t\t\tfunction(data) {",
			"\t\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\t\texpect(data).to.deep.equal(expectedModified${1:__ModuleName__});",
			"\t\t\t\t},",
			"\t\t\t);",
			"\t\t});",
			"",
			"\t\tit('should throw error while updating ${1:__ModuleName__}', function() {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"\t\t\texisting${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('findByIdAndUpdate')",
			"\t\t\t\t.withArgs(existing${1:__ModuleName__}._id, existing${1:__ModuleName__}, { new: true })",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.rejects(expectedError);",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.update${1:__ModuleName__}(existing${1:__ModuleName__}._id, existing${1:__ModuleName__}).catch(",
			"\t\t\t\tfunction(error) {",
			"\t\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t\t},",
			"\t\t\t);",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('delete${1:__ModuleName__}', function() {",
			"\t\tvar existing${1:__ModuleName__}, expectedError;",
			"",
			"\t\tit('should successfully remove ${1:__ModuleName__}', function() {",
			"\t\t\texisting${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('findByIdAndRemove')",
			"\t\t\t\t.withArgs(existing${1:__ModuleName__}._id)",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.resolves(existing${1:__ModuleName__});",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.delete${1:__ModuleName__}(existing${1:__ModuleName__}._id).then(function(data) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(data).to.deep.equal(existing${1:__ModuleName__});",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while removing ${1:__ModuleName__}', function() {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"\t\t\texisting${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"",
			"\t\t\t${1:__ModuleName__}ModelMock.expects('findByIdAndRemove')",
			"\t\t\t\t.withArgs(existing${1:__ModuleName__}._id)",
			"\t\t\t\t.chain('exec')",
			"\t\t\t\t.rejects(expectedError);",
			"",
			"\t\t\treturn ${1:__ModuleName__}Service.delete${1:__ModuleName__}(existing${1:__ModuleName__}._id).catch(function(error) {",
			"\t\t\t\t${1:__ModuleName__}ModelMock.verify();",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"});",
			""
		],
		"description": "Create Express Service Test Suit"
	},
	"Test : Chai : Express : Middleware": {
		"prefix": "ccTest_Chai_Express_Middleware",
		"body": [
			"'use strict';",
			"",
			"var chai = require('chai');",
			"var expect = chai.expect;",
			"var sinon = require('sinon');",
			"var httpMocks = require('node-mocks-http');",
			"var bluebird = require('bluebird');",
			"var Promise = bluebird.Promise;",
			"var ${1:__ModuleName__}Module = require('../../../modules/${1:__ModuleName__}/${1:__ModuleName__}.module')();",
			"var ${1:__ModuleName__}Middleware = ${1:__ModuleName__}Module.${1:__ModuleName__}Middleware;",
			"var ${1:__ModuleName__}Service = ${1:__ModuleName__}Module.${1:__ModuleName__}Service;",
			"var Fixtures = require('../../fixtures/fixtures');",
			"var ${1:__ModuleName__}Fixture = Fixtures.${1:__ModuleName__}Fixture;",
			"var ErrorFixture = Fixtures.ErrorFixture;",
			"var req, res, next;",
			"",
			"describe('${1:__ModuleName__} Middleware', () => {",
			"\tbeforeEach(function() {",
			"\t\treq = httpMocks.createRequest();",
			"\t\tres = httpMocks.createResponse();",
			"\t\tnext = sinon.spy();",
			"\t});",
			"",
			"\tdescribe('add${1:__ModuleName__}', () => {",
			"\t\tvar create${1:__ModuleName__}, create${1:__ModuleName__}Promise, expectedCreated${1:__ModuleName__}, expectedError;",
			"",
			"\t\tbeforeEach(function() {",
			"\t\t\tcreate${1:__ModuleName__} = sinon.stub(${1:__ModuleName__}Service, 'create${1:__ModuleName__}');",
			"\t\t\treq.body = ${1:__ModuleName__}Fixture.new${1:__ModuleName__};",
			"\t\t});",
			"\t\tafterEach(function() {",
			"\t\t\tcreate${1:__ModuleName__}.restore();",
			"\t\t});",
			"",
			"\t\tit('should successfully create new ${1:__ModuleName__}', () => {",
			"\t\t\texpectedCreated${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"\t\t\tcreate${1:__ModuleName__}Promise = Promise.resolve(expectedCreated${1:__ModuleName__});",
			"\t\t\tcreate${1:__ModuleName__}.withArgs(req.body).returns(create${1:__ModuleName__}Promise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.add${1:__ModuleName__}(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(create${1:__ModuleName__}, 1);",
			"",
			"\t\t\treturn create${1:__ModuleName__}Promise.then(function() {",
			"\t\t\t\texpect(req.response).to.be.a('object');",
			"\t\t\t\texpect(req.response).to.deep.equal(expectedCreated${1:__ModuleName__});",
			"\t\t\t\tsinon.assert.callCount(next, 1);",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while creating the new ${1:__ModuleName__}', () => {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"\t\t\tcreate${1:__ModuleName__}Promise = Promise.reject(expectedError);",
			"\t\t\tcreate${1:__ModuleName__}.withArgs(req.body).returns(create${1:__ModuleName__}Promise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.add${1:__ModuleName__}(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(create${1:__ModuleName__}, 1);",
			"",
			"\t\t\treturn create${1:__ModuleName__}Promise.catch(function(error) {",
			"\t\t\t\texpect(error).to.be.a('object');",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('get${1:__ModuleName__}s', () => {",
			"\t\tvar fetch${1:__ModuleName__}s, fetch${1:__ModuleName__}sPromise, expected${1:__ModuleName__}s, expectedError;",
			"\t\tbeforeEach(function() {",
			"\t\t\tfetch${1:__ModuleName__}s = sinon.stub(${1:__ModuleName__}Service, 'fetch${1:__ModuleName__}s');",
			"\t\t\treq.body = {};",
			"\t\t});",
			"\t\tafterEach(function() {",
			"\t\t\tfetch${1:__ModuleName__}s.restore();",
			"\t\t});",
			"",
			"\t\tit('should successfully get all ${1:__ModuleName__}s', () => {",
			"\t\t\texpected${1:__ModuleName__}s = ${1:__ModuleName__}Fixture.${1:__ModuleName__}s;",
			"\t\t\tfetch${1:__ModuleName__}sPromise = Promise.resolve(expected${1:__ModuleName__}s);",
			"\t\t\tfetch${1:__ModuleName__}s.returns(fetch${1:__ModuleName__}sPromise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.get${1:__ModuleName__}s(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(fetch${1:__ModuleName__}s, 1);",
			"",
			"\t\t\treturn fetch${1:__ModuleName__}sPromise.then(function() {",
			"\t\t\t\texpect(req.response).to.be.a('array');",
			"\t\t\t\texpect(req.response.length).to.equal(expected${1:__ModuleName__}s.length);",
			"\t\t\t\texpect(req.response).to.deep.equal(expected${1:__ModuleName__}s);",
			"",
			"\t\t\t\tsinon.assert.callCount(next, 1);",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while getting all ${1:__ModuleName__}s', function() {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"",
			"\t\t\tfetch${1:__ModuleName__}sPromise = Promise.reject(expectedError);",
			"\t\t\tfetch${1:__ModuleName__}s.returns(fetch${1:__ModuleName__}sPromise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.get${1:__ModuleName__}s(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(fetch${1:__ModuleName__}s, 1);",
			"",
			"\t\t\treturn fetch${1:__ModuleName__}sPromise.catch(function(error) {",
			"\t\t\t\texpect(error).to.be.a('object');",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('get${1:__ModuleName__}ById', function() {",
			"\t\tvar fetch${1:__ModuleName__}ById, fetch${1:__ModuleName__}ByIdPromise, expected${1:__ModuleName__}, expectedError;",
			"",
			"\t\tbeforeEach(function() {",
			"\t\t\tfetch${1:__ModuleName__}ById = sinon.stub(${1:__ModuleName__}Service, 'fetch${1:__ModuleName__}ById');",
			"\t\t});",
			"",
			"\t\tafterEach(function() {",
			"\t\t\tfetch${1:__ModuleName__}ById.restore();",
			"\t\t});",
			"",
			"\t\tit('should successfully fetch the ${1:__ModuleName__} by id', function() {",
			"\t\t\texpected${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"",
			"\t\t\tfetch${1:__ModuleName__}ByIdPromise = Promise.resolve(expected${1:__ModuleName__});",
			"\t\t\tfetch${1:__ModuleName__}ById.withArgs(req.params.${1:__ModuleName__}Id).returns(fetch${1:__ModuleName__}ByIdPromise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.get${1:__ModuleName__}ById(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(fetch${1:__ModuleName__}ById, 1);",
			"",
			"\t\t\treturn fetch${1:__ModuleName__}ByIdPromise.then(function() {",
			"\t\t\t\texpect(req.response).to.be.a('object');",
			"\t\t\t\texpect(req.response).to.deep.equal(expected${1:__ModuleName__});",
			"\t\t\t\tsinon.assert.callCount(next, 1);",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while getting ${1:__ModuleName__} by id', function() {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"",
			"\t\t\tfetch${1:__ModuleName__}ByIdPromise = Promise.reject(expectedError);",
			"\t\t\tfetch${1:__ModuleName__}ById.withArgs(req.params.${1:__ModuleName__}Id).returns(fetch${1:__ModuleName__}ByIdPromise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.get${1:__ModuleName__}ById(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(fetch${1:__ModuleName__}ById, 1);",
			"",
			"\t\t\treturn fetch${1:__ModuleName__}ByIdPromise.catch(function(error) {",
			"\t\t\t\texpect(error).to.be.a('object');",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('modify${1:__ModuleName__}', function() {",
			"\t\tvar update${1:__ModuleName__}, update${1:__ModuleName__}Promise, expectedModified${1:__ModuleName__}, expectedError;",
			"",
			"\t\tbeforeEach(function() {",
			"\t\t\tupdate${1:__ModuleName__} = sinon.stub(${1:__ModuleName__}Service, 'update${1:__ModuleName__}');",
			"",
			"\t\t\treq.body = ${1:__ModuleName__}Fixture.Modified${1:__ModuleName__};",
			"\t\t\treq.params.${1:__ModuleName__}Id = req.body._id;",
			"\t\t});",
			"",
			"\t\tafterEach(function() {",
			"\t\t\tupdate${1:__ModuleName__}.restore();",
			"\t\t});",
			"",
			"\t\tit('should successfully modify the ${1:__ModuleName__} details', function() {",
			"\t\t\texpectedModified${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Modified${1:__ModuleName__};",
			"",
			"\t\t\tupdate${1:__ModuleName__}Promise = Promise.resolve(expectedModified${1:__ModuleName__});",
			"\t\t\tupdate${1:__ModuleName__}",
			"\t\t\t\t.withArgs(req.params.${1:__ModuleName__}Id, req.body)",
			"\t\t\t\t.returns(update${1:__ModuleName__}Promise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.modify${1:__ModuleName__}(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(update${1:__ModuleName__}, 1);",
			"",
			"\t\t\treturn update${1:__ModuleName__}Promise.then(function() {",
			"\t\t\t\texpect(req.response).to.be.a('object');",
			"\t\t\t\texpect(req.response).to.deep.equal(expectedModified${1:__ModuleName__});",
			"\t\t\t\tsinon.assert.callCount(next, 1);",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while modifying ${1:__ModuleName__} details', function() {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"",
			"\t\t\tupdate${1:__ModuleName__}Promise = Promise.reject(expectedError);",
			"\t\t\tupdate${1:__ModuleName__}",
			"\t\t\t\t.withArgs(req.params.${1:__ModuleName__}Id, req.body)",
			"\t\t\t\t.returns(update${1:__ModuleName__}Promise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.modify${1:__ModuleName__}(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(update${1:__ModuleName__}, 1);",
			"",
			"\t\t\treturn update${1:__ModuleName__}Promise.catch(function(error) {",
			"\t\t\t\texpect(error).to.be.a('object');",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('remove${1:__ModuleName__}', function() {",
			"\t\tvar delete${1:__ModuleName__}, delete${1:__ModuleName__}Promise, expected${1:__ModuleName__}, expectedError;",
			"",
			"\t\tbeforeEach(function() {",
			"\t\t\tdelete${1:__ModuleName__} = sinon.stub(${1:__ModuleName__}Service, 'delete${1:__ModuleName__}');",
			"\t\t});",
			"",
			"\t\tafterEach(function() {",
			"\t\t\tdelete${1:__ModuleName__}.restore();",
			"\t\t});",
			"",
			"\t\tit('should successfully remove the ${1:__ModuleName__}', function() {",
			"\t\t\texpected${1:__ModuleName__} = ${1:__ModuleName__}Fixture.Created${1:__ModuleName__};",
			"",
			"\t\t\tdelete${1:__ModuleName__}Promise = Promise.resolve(expected${1:__ModuleName__});",
			"\t\t\tdelete${1:__ModuleName__}.withArgs(req.params.${1:__ModuleName__}Id).returns(delete${1:__ModuleName__}Promise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.remove${1:__ModuleName__}(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(delete${1:__ModuleName__}, 1);",
			"",
			"\t\t\treturn delete${1:__ModuleName__}Promise.then(function() {",
			"\t\t\t\texpect(req.response).to.be.a('object');",
			"\t\t\t\texpect(req.response).to.deep.equal(expected${1:__ModuleName__});",
			"\t\t\t\tsinon.assert.callCount(next, 1);",
			"\t\t\t});",
			"\t\t});",
			"",
			"\t\tit('should throw error while removing ${1:__ModuleName__}', function() {",
			"\t\t\texpectedError = ErrorFixture.UnknownError;",
			"",
			"\t\t\tdelete${1:__ModuleName__}Promise = Promise.reject(expectedError);",
			"\t\t\tdelete${1:__ModuleName__}.withArgs(req.params.${1:__ModuleName__}Id).returns(delete${1:__ModuleName__}Promise);",
			"",
			"\t\t\t${1:__ModuleName__}Middleware.remove${1:__ModuleName__}(req, res, next);",
			"",
			"\t\t\tsinon.assert.callCount(delete${1:__ModuleName__}, 1);",
			"",
			"\t\t\treturn delete${1:__ModuleName__}Promise.catch(function(error) {",
			"\t\t\t\texpect(error).to.be.a('object');",
			"\t\t\t\texpect(error).to.deep.equal(expectedError);",
			"\t\t\t});",
			"\t\t});",
			"\t});",
			"});",
			""
		],
		"description": "Create Express Middleware Test Suit"
	},
	"Test : Chai : Express : Controller": {
		"prefix": "ccTest_Chai_Express_Controller",
		"body": [
			"'use strict';",
			"",
			"var chai = require('chai');",
			"var chaiHttp = require('chai-http');",
			"chai.use(chaiHttp);",
			"",
			"var expect = chai.expect;",
			"var request = chai.request;",
			"",
			"var app = require('../../app');",
			"",
			"var Fixtures = require('../fixtures/fixtures');",
			"var ${1:__ModuleName__}Fixture = Fixtures.${1:__ModuleName__}Fixture;",
			"",
			"var baseUri = '/${1:__ModuleName__}s';",
			"var testData = {",
			"\texisting${1:__ModuleName__}: {},",
			"\tmodified${1:__ModuleName__}: ${1:__ModuleName__}Fixture.modified${1:__ModuleName__},",
			"};",
			"",
			"describe('${1:__ModuleName__} Controller', function() {",
			"\tdescribe('POST ' + baseUri, function() {",
			"\t\tit('should add new ${1:__ModuleName__}', function(done) {",
			"\t\t\trequest(app)",
			"\t\t\t\t.post(baseUri)",
			"\t\t\t\t.send(${1:__ModuleName__}Fixture.new${1:__ModuleName__})",
			"\t\t\t\t.end(function(err, res) {",
			"\t\t\t\t\texpect(res.status).to.equal(201);",
			"\t\t\t\t\texpect(res.body).to.not.equal({});",
			"\t\t\t\t\texpect(res.body._id).to.not.equal(undefined);",
			"\t\t\t\t\texpect(res.body.firstName).to.equal(",
			"\t\t\t\t\t\t${1:__ModuleName__}Fixture.created${1:__ModuleName__}.firstName,",
			"\t\t\t\t\t);",
			"",
			"\t\t\t\t\tdone();",
			"\t\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('GET ' + baseUri, function() {",
			"\t\tit('should get all ${1:__ModuleName__}s', function(done) {",
			"\t\t\trequest(app)",
			"\t\t\t\t.get(baseUri)",
			"\t\t\t\t.end(function(err, res) {",
			"\t\t\t\t\texpect(res.status).to.equal(200);",
			"\t\t\t\t\texpect(res.body).to.not.equal(undefined);",
			"\t\t\t\t\texpect(res.body).to.be.a('array');",
			"\t\t\t\t\texpect(res.body.length).to.not.equal(0);",
			"",
			"\t\t\t\t\ttestData.existing${1:__ModuleName__} = res.body[0];",
			"",
			"\t\t\t\t\tdone();",
			"\t\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('GET ' + baseUri + '/:${1:__ModuleName__}Id', function() {",
			"\t\tit('should get a ${1:__ModuleName__} by id', function(done) {",
			"\t\t\trequest(app)",
			"\t\t\t\t.get(baseUri + '/' + testData.existing${1:__ModuleName__}._id)",
			"\t\t\t\t.end(function(err, res) {",
			"\t\t\t\t\texpect(res.status).to.equal(200);",
			"\t\t\t\t\texpect(res.body).to.not.equal(undefined);",
			"\t\t\t\t\texpect(res.body).to.deep.equal(testData.existing${1:__ModuleName__});",
			"\t\t\t\t\texpect(res.body.firstName).to.equal(",
			"\t\t\t\t\t\ttestData.existing${1:__ModuleName__}.firstName,",
			"\t\t\t\t\t);",
			"",
			"\t\t\t\t\tdone();",
			"\t\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('PUT ' + baseUri + '/:${1:__ModuleName__}Id', function() {",
			"\t\tit('should modify existing ${1:__ModuleName__}', function(done) {",
			"\t\t\ttestData.modified${1:__ModuleName__}._id = testData.existing${1:__ModuleName__}._id;",
			"",
			"\t\t\trequest(app)",
			"\t\t\t\t.put(baseUri + '/' + testData.modified${1:__ModuleName__}._id)",
			"\t\t\t\t.send(testData.modified${1:__ModuleName__})",
			"\t\t\t\t.end(function(err, res) {",
			"\t\t\t\t\texpect(res.status).to.equal(200);",
			"\t\t\t\t\texpect(res.body).to.not.equal(undefined);",
			"\t\t\t\t\texpect(res.body.firstName).to.equal(",
			"\t\t\t\t\t\ttestData.modified${1:__ModuleName__}.firstName,",
			"\t\t\t\t\t);",
			"\t\t\t\t\texpect(res.body.address).to.equal(testData.modified${1:__ModuleName__}.address);",
			"",
			"\t\t\t\t\tdone();",
			"\t\t\t\t});",
			"\t\t});",
			"\t});",
			"",
			"\tdescribe('DELETE ' + baseUri + '/:${1:__ModuleName__}Id', function() {",
			"\t\tit('should remove an existing ${1:__ModuleName__}', function(done) {",
			"\t\t\trequest(app)",
			"\t\t\t\t.delete(baseUri + '/' + testData.existing${1:__ModuleName__}._id)",
			"\t\t\t\t.end(function(err, res) {",
			"\t\t\t\t\texpect(res.status).to.equal(200);",
			"\t\t\t\t\texpect(res.body.firstName).to.not.equal(undefined);",
			"\t\t\t\t\texpect(res.body.firstName).to.equal(",
			"\t\t\t\t\t\ttestData.existing${1:__ModuleName__}.firstName,",
			"\t\t\t\t\t);",
			"",
			"\t\t\t\t\tdone();",
			"\t\t\t\t});",
			"\t\t});",
			"\t});",
			"});",
			""
		],
		"description": "Create Express Controller Test Suit"
	},
	"Test : Chai : MongoDB : Module": {
		"prefix": "ccTest_Chai_MongoDB_Module",
		"body": [
			"var chai = require('chai');",
			"var expect = chai.expect;",
			"",
			"var MongoDBModule = require('../../../modules/mongodb/mongodb.module');",
			"",
			"describe('MongoDB Module', () => {",
			"\tdescribe('mongodb.module file', () => {",
			"\t\tit('Should read the mongodb.module file', () => {",
			"\t\t\texpect(MongoDBModule).to.be.a('object');",
			"\t\t});",
			"\t\tit('Should confirm MongoDBUtil exist', () => {",
			"\t\t\texpect(MongoDBModule.MongoDBUtil).to.be.a('object');",
			"\t\t});",
			"\t});",
			"});",
			""
		],
		"description": "Create MongoDB Module Test Suit"
	},
	"Test : Chai : MongoDB : Util": {
		"prefix": "ccTest_Chai_MongoDB_Util",
		"body": [
			"var chai = require('chai');",
			"var expect = chai.expect;",
			"",
			"var MongoDBUtil = require('../../../modules/mongodb/mongodb.util');",
			"",
			"describe('MongoDB Util', () => {",
			"\tdescribe('mongodb.util file', () => {",
			"\t\tit('should read the mongodb.util file', () => {",
			"\t\t\texpect(MongoDBUtil).to.be.a('object');",
			"\t\t});",
			"\t\tit('should confirm init function exist', () => {",
			"\t\t\texpect(MongoDBUtil.init).to.be.a('function');",
			"\t\t});",
			"\t});",
			"});",
			""
		],
		"description": "Create MongoDB Util Test Suit"
	},
	"Test : Chai : Fixture": {
		"prefix": "cc_Test_Chai_Fixture",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tmodule.exports = {",
			"\t\t${1:__ModuleName__}Fixture: require('./${1:__ModuleName__}/${1:__ModuleName__}.fixture'),",
			"\t\tErrorFixture: require('./Error/Error.fixture'),",
			"\t};",
			"})();",
			""
		],
		"description": "Create Test Fixture JS File"
	}
}
