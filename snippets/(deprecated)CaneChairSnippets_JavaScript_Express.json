{
	"Express : API": {
		"prefix": "ccExpress_Api",
		"body": [
			"const ${1:__ModelName__} = require('./${1/^(.)(.*)$/${1:/downcase}${2}/}s');",
            "const autoCatch = require('./auto-catch');",
            "",
            "const list${1:__ModelName__}s = async (req, res) => {",
            "  const { offset = 0, limit = 25, tag } = req.query;",
            "",
            "  const ${1/^(.)(.*)$/${1:/downcase}${2}/}s = await ${1:__ModelName__}.list({",
            "    offset: Number(offset),",
            "    limit: Number(limit),",
            "    tag,",
            "  });",
            "",
            "  res.json(${1/^(.)(.*)$/${1:/downcase}${2}/}s);",
            "};",
            "",
            "const get${1:__ModelName__} = async (req, res, next) => {",
            "  const { id } = req.params;",
            "  const ${1/^(.)(.*)$/${1:/downcase}${2}/} = await ${1:__ModelName__}.get(id);",
            "  if (!${1/^(.)(.*)$/${1:/downcase}${2}/}) return next();",
            "",
            "  res.json(${1/^(.)(.*)$/${1:/downcase}${2}/});",
            "};",
            "",
            "const create${1:__ModelName__} = async (req, res, next) => {",
            "  const ${1/^(.)(.*)$/${1:/downcase}${2}/} = await ${1:__ModelName__}.create(req.body);",
            "  res.json(${1/^(.)(.*)$/${1:/downcase}${2}/});",
            "};",
            "",
            "const edit${1:__ModelName__} = async (req, res, next) => {",
            "  const change = req.body;",
            "  const ${1/^(.)(.*)$/${1:/downcase}${2}/} = await ${1:__ModelName__}.edit(req.params.id, change);",
            "",
            "  res.json(${1/^(.)(.*)$/${1:/downcase}${2}/});",
            "};",
            "",
            "const delete${1:__ModelName__} = async (req, res, next) => {",
            "  const result = await ${1:__ModelName__}.remove(req.params.id);",
            "",
            "  res.json(result);",
            "};",
            "",
            "module.exports = autoCatch({",
            "  list${1:__ModelName__}s,",
            "  get${1:__ModelName__},",
            "  create${1:__ModelName__},",
            "  edit${1:__ModelName__},",
            "  delete${1:__ModelName__},",
            "});",
            ""
		],
		"description": "Crease an Express Module"
	},
	"Express : Module": {
		"prefix": "ccExpress_Module",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tmodule.exports = init;",
			"",
			"\tfunction init() {",
			"\t\treturn {",
			"\t\t\t${1:__ModuleName__}Controller: require('./${1:__ModuleName__}.Controller'),",
			"\t\t\t${1:__ModuleName__}Middleware: require('./${1:__ModuleName__}.Middleware'),",
			"\t\t\t${1:__ModuleName__}Service: require('./${1:__ModuleName__}.Service'),",
			"\t\t\t${1:__ModuleName__}Model: require('./${1:__ModuleName__}.Model'),",
			"\t\t};",
			"\t}",
			"})();",
			""
		],
		"description": "Crease an Express Module"
	},
	"Express : Controller": {
		"prefix": "ccExpress_Controller",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tvar express = require('express');",
			"\tvar router = express.Router();",
			"",
			"\tvar ${1:__ModuleName__}Middleware = require('./${1:__ModuleName__}.module')().${1:__ModuleName__}Middleware;",
			"",
			"\trouter.post('/', ${1:__ModuleName__}Middleware.add${1:__ModuleName__}, function(req, res) {",
			"\t\tres.status(201).json(req.response);",
			"\t});",
			"",
			"\trouter.post('/add${1:__ModuleName__}s', ${1:__ModuleName__}Middleware.add${1:__ModuleName__}s, function(req, res) {",
			"\t\tres.status(201).json(req.response);",
			"\t});",
			"",
			"\trouter.get('/', ${1:__ModuleName__}Middleware.get${1:__ModuleName__}s, function(req, res) {",
			"\t\tres.status(200).json(req.response);",
			"\t});",
			"",
			"\trouter.get(",
			"\t\t'/${2:__Params__}/:${2:__Params__}',",
			"\t\t${1:__ModuleName__}Middleware.get${1:__ModuleName__}ByParams,",
			"\t\tfunction(req, res) {",
			"\t\t\tres.status(200).json(req.response);",
			"\t\t},",
			"\t);",
			"",
			"\trouter.get('/:${1:__ModuleName__}Id', ${1:__ModuleName__}Middleware.get${1:__ModuleName__}ById, function(req, res) {",
			"\t\tres.status(200).json(req.response);",
			"\t});",
			"",
			"\trouter.put('/:${1:__ModuleName__}Id', ${1:__ModuleName__}Middleware.modify${1:__ModuleName__}, function(req, res) {",
			"\t\tres.status(200).json(req.response);",
			"\t});",
			"",
			"\trouter.delete('/:${1:__ModuleName__}Id', ${1:__ModuleName__}Middleware.remove${1:__ModuleName__}, function(req, res) {",
			"\t\tres.status(200).json(req.response);",
			"\t});",
			"",
			"\tmodule.exports = router;",
			"})();",
			""
		],
		"description": "Create an Express Controller"
	},
	"Express : Service": {
		"prefix": "ccExpress_Service",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tmodule.exports = {",
			"\t\tcreate${1:__ModuleName__}: create${1:__ModuleName__},",
			"\t\tcreate${1:__ModuleName__}s: create${1:__ModuleName__}s,",
			"\t\tfetch${1:__ModuleName__}s: fetch${1:__ModuleName__}s,",
			"\t\tfetch${1:__ModuleName__}ById: fetch${1:__ModuleName__}ById,",
			"\t\tfetch${1:__ModuleName__}ByParams: fetch${1:__ModuleName__}ByParams,",
			"\t\tupdate${1:__ModuleName__}: update${1:__ModuleName__},",
			"\t\tdelete${1:__ModuleName__}: delete${1:__ModuleName__},",
			"\t};",
			"",
			"\tvar ${1:__ModuleName__}Model = require('./${1:__ModuleName__}.module')().${1:__ModuleName__}Model;",
			"",
			"\tfunction create${1:__ModuleName__}(${1:__ModuleName__}) {",
			"\t\treturn ${1:__ModuleName__}Model.create(${1:__ModuleName__});",
			"\t}",
			"\tfunction create${1:__ModuleName__}s(${1:__ModuleName__}s) {",
			"\t\treturn ${1:__ModuleName__}Model.insertMany(${1:__ModuleName__}s);",
			"\t}",
			"",
			"\tfunction fetch${1:__ModuleName__}s() {",
			"\t\treturn ${1:__ModuleName__}Model.find({}).exec();",
			"\t}",
			"",
			"\tfunction fetch${1:__ModuleName__}ById(${1:__ModuleName__}Id) {",
			"\t\treturn ${1:__ModuleName__}Model.findById(${1:__ModuleName__}Id).exec();",
			"\t}",
			"",
			"\tfunction fetch${1:__ModuleName__}ByParams(params) {",
			"\t\treturn ${1:__ModuleName__}Model.find(params).exec();",
			"\t}",
			"",
			"\tfunction update${1:__ModuleName__}(${1:__ModuleName__}Id, ${1:__ModuleName__}) {",
			"\t\treturn ${1:__ModuleName__}Model.findByIdAndUpdate(${1:__ModuleName__}Id, ${1:__ModuleName__}, {",
			"\t\t\tnew: true,",
			"\t\t}).exec();",
			"\t}",
			"",
			"\tfunction delete${1:__ModuleName__}(${1:__ModuleName__}Id) {",
			"\t\treturn ${1:__ModuleName__}Model.findByIdAndRemove(${1:__ModuleName__}Id).exec();",
			"\t}",
			"})();",
			""
		],
		"description": "Create an Express Service"
	},
	"Express : Middleware": {
		"prefix": "ccExpress_Middleware",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tmodule.exports = {",
			"\t\tadd${1:__ModuleName__}: add${1:__ModuleName__},",
			"\t\tadd${1:__ModuleName__}s: add${1:__ModuleName__}s,",
			"\t\tget${1:__ModuleName__}s: get${1:__ModuleName__}s,",
			"\t\tget${1:__ModuleName__}ById: get${1:__ModuleName__}ById,",
			"\t\tget${1:__ModuleName__}ByParams: get${1:__ModuleName__}ByParams,",
			"\t\tmodify${1:__ModuleName__}: modify${1:__ModuleName__},",
			"\t\tremove${1:__ModuleName__}: remove${1:__ModuleName__},",
			"\t};",
			"",
			"\tvar ${1:__ModuleName__}Service = require('./${1:__ModuleName__}.module')().${1:__ModuleName__}Service;",
			"",
			"\tfunction add${1:__ModuleName__}(req, res, next) {",
			"\t\t${1:__ModuleName__}Service.create${1:__ModuleName__}(req.body)",
			"\t\t\t.then(success)",
			"\t\t\t.catch(failure);",
			"",
			"\t\tfunction success(data) {",
			"\t\t\treq.response = data;",
			"\t\t\tnext();",
			"\t\t}",
			"",
			"\t\tfunction failure(error) {",
			"\t\t\tnext(error);",
			"\t\t}",
			"\t}",
			"\tfunction add${1:__ModuleName__}s(req, res, next) {",
			"\t\t${1:__ModuleName__}Service.create${1:__ModuleName__}s(req.body)",
			"\t\t\t.then(success)",
			"\t\t\t.catch(failure);",
			"",
			"\t\tfunction success(data) {",
			"\t\t\treq.response = data;",
			"\t\t\tnext();",
			"\t\t}",
			"",
			"\t\tfunction failure(error) {",
			"\t\t\tnext(error);",
			"\t\t}",
			"\t}",
			"",
			"\tfunction get${1:__ModuleName__}s(req, res, next) {",
			"\t\t${1:__ModuleName__}Service.fetch${1:__ModuleName__}s()",
			"\t\t\t.then(success)",
			"\t\t\t.catch(failure);",
			"",
			"\t\tfunction success(data) {",
			"\t\t\treq.response = data;",
			"\t\t\tnext();",
			"\t\t}",
			"",
			"\t\tfunction failure(err) {",
			"\t\t\tnext(err);",
			"\t\t}",
			"\t}",
			"",
			"\tfunction get${1:__ModuleName__}ById(req, res, next) {",
			"\t\t${1:__ModuleName__}Service.fetch${1:__ModuleName__}ById(req.params.${1:__ModuleName__}Id)",
			"\t\t\t.then(success)",
			"\t\t\t.catch(failure);",
			"",
			"\t\tfunction success(data) {",
			"\t\t\treq.response = data;",
			"\t\t\tnext();",
			"\t\t}",
			"",
			"\t\tfunction failure(err) {",
			"\t\t\tnext(err);",
			"\t\t}",
			"\t}",
			"",
			"\tfunction get${1:__ModuleName__}ByParams(req, res, next) {",
			"\t\tconsole.log(`req.params:`, req.params);",
			"\t\t${1:__ModuleName__}Service.fetch${1:__ModuleName__}ByParams(req.params)",
			"\t\t\t.then(data => {",
			"\t\t\t\treq.response = data;",
			"\t\t\t\tnext();",
			"\t\t\t})",
			"\t\t\t.catch(err => {",
			"\t\t\t\tnext(err);",
			"\t\t\t});",
			"\t}",
			"",
			"\tfunction modify${1:__ModuleName__}(req, res, next) {",
			"\t\t${1:__ModuleName__}Service.update${1:__ModuleName__}(req.params.${1:__ModuleName__}Id, req.body)",
			"\t\t\t.then(success)",
			"\t\t\t.catch(error);",
			"",
			"\t\tfunction success(data) {",
			"\t\t\treq.response = data;",
			"\t\t\tnext();",
			"\t\t}",
			"",
			"\t\tfunction error(err) {",
			"\t\t\tnext(err);",
			"\t\t}",
			"\t}",
			"",
			"\tfunction remove${1:__ModuleName__}(req, res, next) {",
			"\t\t${1:__ModuleName__}Service.delete${1:__ModuleName__}(req.params.${1:__ModuleName__}Id)",
			"\t\t\t.then(success)",
			"\t\t\t.catch(error);",
			"",
			"\t\tfunction success(data) {",
			"\t\t\treq.response = data;",
			"\t\t\tnext();",
			"\t\t}",
			"",
			"\t\tfunction error(err) {",
			"\t\t\tnext(err);",
			"\t\t}",
			"\t}",
			"})();",
			""
		],
		"description": "Crease an Express Middleware"
	},

	"Express : Middleware : IsAuthenticated": {
		"prefix": "ccExpress_MiddleWare_IsAuthenticated",
		"body": [
			"exports.authenticate_middleware = function (req, res, next) {",
			"\tif (!req.isAuthenticated()) {",
			"\t\treturn res.status(401).send({",
			"\t\t\tmessage: 'Unauthorized.'",
			"\t\t});",
			"\t}",
			"\tnext();",
			"};"
		],
		"description": ""
	},
	"Express : Middleware : HasAuthorized": {
		"prefix": "ccExpress_MiddleWare_HasAuthorized",
		"body": [
			"exports.${1:hasAuthorizationFor...} = function (req, res, next) {",
			"\tif (${2:__authorizationCondition__}) {",
			"\t\treturn res.status(403).send({",
			"\t\t\tmessage: 'Unauthorized.'",
			"\t\t});",
			"\t}",
			"\tnext();",
			"}"
		],
		"description": ""
	},
	"Express : MiddleWare : VerifyToken": {
		"prefix": "ccExpress_MiddleWare_VerifyToken",
		"body": [
			"var jwt = require('jsonwebtoken');",
			"function verifyToken(req, res, next) {",
			"\tvar token = req.headers['${1}'];",
			"\tif (!token)",
			"\t\treturn res.status(403).send('No token.');",
			"\tjwt.verify(token, config.secret, function (err, decoded) {",
			"\t\tif (err) {",
			"\t\t\treturn res.status(500).send('Invalid token.');",
			"\t\t}",
			"",
			"\t\t${2:req.userId = decoded.id;}",
			"\t\t",
			"\t\tnext();",
			"\t});",
			"}"
		],
		"description": ""
	},

	"Express : Response : Status : 200 : Send": {
		"prefix": "ccExpress_Response_Status_200_Send",
		"body": ["${1:res}.status(200).send(${2});"],
		"description": ""
	},
	"Express : Response : Status : 401 : Send": {
		"prefix": "ccExpress_Response_Status_401_Send",
		"body": ["${1:res}.status(401).send(${2});"],
		"description": ""
	},
	"Express : Response : Status : 404 : Send": {
		"prefix": "ccExpress_Response_Status_404_Send",
		"body": ["${1:res}.status(404).send('${2:Not found.}');"],
		"description": ""
	},
	"Express : Response : Status : 500 : Send": {
		"prefix": "ccExpress_Response_Status_500_Send",
		"body": ["${1:res}.status(500).send({ message: '${2:message}' ${3} });"],
		"description": ""
	}
}
