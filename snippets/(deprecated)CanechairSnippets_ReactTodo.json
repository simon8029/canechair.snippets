{
  "Todo-App.js": {
    "prefix": "cc_todo_App.js",
    "body": [
      "import React from 'react';",
      "import './App.css';",
      "import { Provider } from 'react-redux';",
      "import store from './store';",
      "import Todos from './todos';",
      "",
      "function App() {",
      "  console.log(`Application is running in \"${process.env.NODE_ENV}\" mode.`);",
      "  return (",
      "    <Provider store={store}>",
      "      <div className=\"App\">",
      "        <Todos />",
      "      </div>",
      "    </Provider>",
      "  );",
      "}",
      "",
      "export default App;"
    ]
  },
  "Todo-store.js": {
    "prefix": "cc_todo_store.js",
    "body": [
      "import { createStore, applyMiddleware } from 'redux';",
      "import thunk from 'redux-thunk';",
      "import { composeWithDevTools } from 'redux-devtools-extension';",
      "import rootReducer from './rootReducer';",
      "",
      "const store = createStore(",
      "  rootReducer,",
      "  composeWithDevTools(applyMiddleware(thunk))",
      ");",
      "",
      "export default store;"
    ]
  },
  "Todo-rootReducer.js": {
    "prefix": "cc_todo_rootReducer.js",
    "body": [
      "import { combineReducers } from 'redux';",
      "import todoReducer from './todoReducer';",
      "",
      "const rootReducer = combineReducers({",
      "  todos: todoReducer",
      "});",
      "",
      "export default rootReducer;"
    ]
  },
  "Todo-todoReducer.js": {
    "prefix": "cc_todo_todoReducer.js",
    "body": [
      "import * as TodoActionTypes from './todoActionTypes';",
      "",
      "const initialState = {",
      "  todos: []",
      "};",
      "",
      "export default function todoReducer(state = initialState, action) {",
      "  switch (action.type) {",
      "    case TodoActionTypes.GET_ALL_TODOS_START: {",
      "      return {",
      "        ...state",
      "      };",
      "    }",
      "",
      "    case TodoActionTypes.GET_ALL_TODOS_SUCCESS: {",
      "      return {",
      "        ...state,",
      "        todos: action.payload",
      "      };",
      "    }",
      "",
      "    case TodoActionTypes.GET_ALL_TODOS_FAILURE: {",
      "      return {",
      "        ...state,",
      "        error: action.payload",
      "      };",
      "    }",
      "",
      "    case TodoActionTypes.ADD_NEW_TODO_SUCCESS: {",
      "      return {",
      "        ...state,",
      "        todos: [...state.todos, action.payload]",
      "      };",
      "    }",
      "",
      "    case TodoActionTypes.ADD_NEW_TODO_FAILURE: {",
      "      return {",
      "        ...state,",
      "        error: action.payload",
      "      };",
      "    }",
      "    case TodoActionTypes.DELETE_TODO_SUCCESS: {",
      "      return {",
      "        ...state,",
      "        todos: [...state.todos.filter(item => item.id !== action.payload)]",
      "      };",
      "    }",
      "",
      "    case TodoActionTypes.DELETE_TODO_FAILURE: {",
      "      return {",
      "        ...state,",
      "        error: action.payload",
      "      };",
      "    }",
      "    case TodoActionTypes.UPDATE_TODO_SUCCESS: {",
      "      const todos = state.todos.map(item => {",
      "        if (item.id === action.payload.id) {",
      "          return action.payload;",
      "        }",
      "        return item;",
      "      });",
      "",
      "      return {",
      "        ...state,",
      "        todos",
      "      };",
      "    }",
      "",
      "    case TodoActionTypes.UPDATE_TODO_FAILURE: {",
      "      return {",
      "        ...state,",
      "        error: action.payload",
      "      };",
      "    }",
      "",
      "    default:",
      "      return state;",
      "  }",
      "}"
    ]
  },
  "Todo-todoActions.js": {
    "prefix": "cc_todo_todoActions.js",
    "body": [
      "import axios from 'axios';",
      "import * as TodoActionTypes from './todoActionTypes';",
      "",
      "export function getAllTodosStart() {",
      "  return dispatch => {",
      "    axios.get(`${process.env.REACT_APP_END_POINT_BASEURL}/Todos`).then(",
      "      res => {",
      "        if (res.status === 200) {",
      "          dispatch(getAllTodosSuccess(res.data));",
      "        }",
      "      },",
      "      err => {",
      "        dispatch(getAllTodosFailure(err));",
      "      }",
      "    );",
      "  };",
      "}",
      "",
      "const getAllTodosSuccess = data => {",
      "  return {",
      "    type: TodoActionTypes.GET_ALL_TODOS_SUCCESS,",
      "    payload: data",
      "  };",
      "};",
      "const getAllTodosFailure = error => {",
      "  return {",
      "    type: TodoActionTypes.GET_ALL_TODOS_FAILURE,",
      "    payload: error",
      "  };",
      "};",
      "",
      "export function addNewTodoStart(newTodo) {",
      "  return dispatch => {",
      "    axios",
      "      .post(`${process.env.REACT_APP_END_POINT_BASEURL}/Todos`, newTodo)",
      "      .then(",
      "        res => {",
      "          if (res.status === 201) {",
      "            dispatch(addNewTodoSuccess(res.data));",
      "          }",
      "        },",
      "        err => {",
      "          dispatch(addNewTodoFailure(err));",
      "        }",
      "      );",
      "  };",
      "}",
      "",
      "const addNewTodoSuccess = data => {",
      "  return {",
      "    type: TodoActionTypes.ADD_NEW_TODO_SUCCESS,",
      "    payload: data",
      "  };",
      "};",
      "const addNewTodoFailure = error => {",
      "  return {",
      "    type: TodoActionTypes.ADD_NEW_TODO_FAILURE,",
      "    payload: error",
      "  };",
      "};",
      "",
      "export function deleteTodoStart(id) {",
      "  return dispatch => {",
      "    axios",
      "      .delete(`${process.env.REACT_APP_END_POINT_BASEURL}/Todos/\\${id}/`)",
      "      .then(",
      "        res => {",
      "          if (res.status === 200) {",
      "            dispatch(deleteTodoSuccess(id));",
      "          }",
      "        },",
      "        err => {",
      "          dispatch(deleteTodoFailure(err));",
      "        }",
      "      );",
      "  };",
      "}",
      "",
      "const deleteTodoSuccess = data => {",
      "  return {",
      "    type: TodoActionTypes.DELETE_TODO_SUCCESS,",
      "    payload: data",
      "  };",
      "};",
      "const deleteTodoFailure = error => {",
      "  return {",
      "    type: TodoActionTypes.DELETE_TODO_FAILURE,",
      "    payload: error",
      "  };",
      "};",
      "",
      "export function updateTodoStart(id, newTodo) {",
      "  return dispatch => {",
      "    axios",
      "      .put(`${process.env.REACT_APP_END_POINT_BASEURL}/Todos/\\${id}/`, newTodo)",
      "      .then(",
      "        res => {",
      "          if (res.status === 200) {",
      "            dispatch(updateTodoSuccess(res.data));",
      "          }",
      "        },",
      "        err => {",
      "          dispatch(updateTodoFailure(err));",
      "        }",
      "      );",
      "  };",
      "}",
      "",
      "const updateTodoSuccess = newTodo => {",
      "  return {",
      "    type: TodoActionTypes.UPDATE_TODO_SUCCESS,",
      "    payload: newTodo",
      "  };",
      "};",
      "const updateTodoFailure = error => {",
      "  return {",
      "    type: TodoActionTypes.UPDATE_TODO_FAILURE,",
      "    payload: error",
      "  };",
      "};",
      "",
      "export default {",
      "  getAllTodosStart,",
      "  addNewTodoStart,",
      "  deleteTodoStart,",
      "  updateTodoStart",
      "};"
    ]
  },
  "Todo-todoActionTypes.js": {
    "prefix": "cc_todo_todoActionTypes.js",
    "body": [
      "export const GET_ALL_TODOS_START = 'GET_ALL_TODOS_START';",
      "export const GET_ALL_TODOS_SUCCESS = 'GET_ALL_TODOS_SUCCESS';",
      "export const GET_ALL_TODOS_FAILURE = 'GET_ALL_TODOS_FAILURE';",
      "export const ADD_NEW_TODO_START = 'ADD_NEW_TODO_START';",
      "export const ADD_NEW_TODO_SUCCESS = 'ADD_NEW_TODO_SUCCESS';",
      "export const ADD_NEW_TODO_FAILURE = 'ADD_NEW_TODO_FAILURE';",
      "export const DELETE_TODO_START = 'DELETE_TODO_START';",
      "export const DELETE_TODO_SUCCESS = 'DELETE_TODO_SUCCESS';",
      "export const DELETE_TODO_FAILURE = 'DELETE_TODO_FAILURE';",
      "export const UPDATE_TODO_START = 'UPDATE_TODO_START';",
      "export const UPDATE_TODO_SUCCESS = 'UPDATE_TODO_SUCCESS';",
      "export const UPDATE_TODO_FAILURE = 'UPDATE_TODO_FAILURE';"
    ]
  },
  "Todo-todos.js": {
    "prefix": "cc_todo_HOOKS_todos.js",
    "body": [
      "import React, { useState, useEffect, Fragment } from 'react';",
      "import { useSelector, useDispatch } from 'react-redux';",
      "import axios from 'axios';",
      "import {",
      "  getAllTodosStart,",
      "  addNewTodoStart,",
      "  deleteTodoStart",
      "} from './todoActions';",
      "import Todo from './todo';",
      "import './todos.scss';",
      "",
      "export default function Todos() {",
      "  const [title, setTitle] = useState('');",
      "  const [isTodoEditing, setIsTodoEditing] = useState(false);",
      "  const todos = useSelector(state => state.todos.todos);",
      "",
      "  const dispatch = useDispatch();",
      "",
      "  useEffect(() => {",
      "    dispatch(getAllTodosStart());",
      "  }, []);",
      "",
      "  const onInputChange_title = e => {",
      "    setTitle(e.target.value);",
      "  };",
      "",
      "  const onButtonClick_add = () => {",
      "    if (title === '') return;",
      "    dispatch(addNewTodoStart({ title }));",
      "  };",
      "",
      "  return (",
      "    <div className=\"todos\">",
      "      title:",
      "      <input onChange={onInputChange_title} />",
      "      <button onClick={onButtonClick_add}>Add</button>",
      "      {todos.map((todo, index) => {",
      "        return (",
      "          <div className=\"todos-row\" key={index}>",
      "            <Todo todo={todo} />",
      "          </div>",
      "        );",
      "      })}",
      "    </div>",
      "  );",
      "}"
    ]
  },
  "Todo-todo.js": {
    "prefix": "cc_todo_HOOKS_todo.js",
    "body": [
      "import React, { useState, useEffect } from 'react';",
      "import { useDispatch } from 'react-redux';",
      "import { deleteTodoStart, updateTodoStart } from './todoActions';",
      "",
      "export default function Todo({ todo }) {",
      "  const [isEditing, setIsEditing] = useState();",
      "  const [todoTitle, setTodoTitle] = useState();",
      "  const dispatch = useDispatch();",
      "",
      "  useEffect(() => {",
      "    console.log(`todo:`, todo);",
      "  }, []);",
      "",
      "  const onButtonClick_delete = id => {",
      "    dispatch(deleteTodoStart(id));",
      "  };",
      "",
      "  const onButtonClick_edit = () => {",
      "    setIsEditing(true);",
      "  };",
      "",
      "  const onInputChange_title = e => {",
      "    setTodoTitle(e.target.value);",
      "  };",
      "",
      "  const onButtonClick_save = () => {",
      "    dispatch(updateTodoStart(todo.id, { ...todo, title: todoTitle }));",
      "    setIsEditing(false);",
      "  };",
      "",
      "  return (",
      "    <div className=\"\">",
      "      {todo.id} -",
      "      {isEditing ? (",
      "        <input value={todoTitle} onChange={onInputChange_title} />",
      "      ) : (",
      "        todo.title",
      "      )}",
      "      {isEditing ? (",
      "        <button onClick={onButtonClick_save}>Save</button>",
      "      ) : (",
      "        <button onClick={onButtonClick_edit}>Edit</button>",
      "      )}",
      "      <button onClick={() => onButtonClick_delete(todo.id)}>Delete</button>",
      "    </div>",
      "  );",
      "}"
    ]
  },
  "Todo-.env": {
    "prefix": "cc_todo_env",
    "body": ["REACT_APP_END_POINT_BASEURL = http://localhost:8029"]
  },
  "Todo-CLASS : todo.js": {
    "prefix": "cc_todo_CLASS_todo.js",
    "body": [
      "import React from 'react';\r",
      "import { connect } from 'react-redux';\r",
      "import { deleteTodoStart, updateTodoStart } from './todoActions';\r",
      "\r",
      "class Todo extends React.Component {\r",
      "  constructor(props) {\r",
      "    super(props);\r",
      "    this.state = { isEditing: false, todoTitle: '' };\r",
      "  }\r",
      "\r",
      "  onButtonClick_delete = id => {\r",
      "    this.props.deleteTodoStart(id);\r",
      "  };\r",
      "\r",
      "  onButtonClick_edit = () => {\r",
      "    this.setState({ isEditing: true });\r",
      "  };\r",
      "\r",
      "  onInputChange_title = e => {\r",
      "    this.setState({ todoTitle: e.target.value });\r",
      "  };\r",
      "\r",
      "  onButtonClick_save = () => {\r",
      "    this.props.updateTodoStart(this.props.todo.id, {\r",
      "      ...this.props.todo,\r",
      "      title: this.state.todoTitle\r",
      "    });\r",
      "    this.setState({ isEditing: false });\r",
      "  };\r",
      "\r",
      "  render() {\r",
      "    return (\r",
      "      <div className=\"\">\r",
      "        {this.props.todo.id} -\r",
      "        {this.state.isEditing ? (\r",
      "          <input\r",
      "            value={this.state.todoTitle}\r",
      "            onChange={this.onInputChange_title}\r",
      "          />\r",
      "        ) : (\r",
      "          this.props.todo.title\r",
      "        )}\r",
      "        {this.state.isEditing ? (\r",
      "          <button onClick={this.onButtonClick_save}>Save</button>\r",
      "        ) : (\r",
      "          <button onClick={this.onButtonClick_edit}>Edit</button>\r",
      "        )}\r",
      "        <button onClick={() => this.onButtonClick_delete(this.props.todo.id)}>\r",
      "          Delete\r",
      "        </button>\r",
      "      </div>\r",
      "    );\r",
      "  }\r",
      "}\r",
      "\r",
      "const mapStateToProps = (state, ownProps) => {\r",
      "  const todo = ownProps.todo;\r",
      "  return { todo };\r",
      "};\r",
      "const mapDispatchToProps = { deleteTodoStart, updateTodoStart };\r",
      "\r",
      "export default connect(mapStateToProps, mapDispatchToProps)(Todo);"
    ]
  },
  "Todo-CLASS : todos.js": {
    "prefix": "cc_todo_CLASS_todo.js",
    "body": [
      "\r",
      "import React from 'react';\r",
      "import { connect } from 'react-redux';\r",
      "import {\r",
      "  getAllTodosStart,\r",
      "  addNewTodoStart,\r",
      "  deleteTodoStart\r",
      "} from './todoActions';\r",
      "import Todo from './todo';\r",
      "import './todos.scss';\r",
      "\r",
      "class Todos extends React.Component {\r",
      "  constructor(props) {\r",
      "    super(props);\r",
      "    this.state = { title: '' };\r",
      "  }\r",
      "\r",
      "  componentDidMount() {\r",
      "    this.props.getAllTodosStart();\r",
      "  }\r",
      "\r",
      "  static getDerivedStateFromProps(nextProps, prevState) {\r",
      "    if (nextProps.todos !== prevState.todos) {\r",
      "      return { todos: nextProps.todos };\r",
      "    } else return null;\r",
      "  }\r",
      "\r",
      "  onInputChange_title = e => {\r",
      "    this.setState({ title: e.target.value });\r",
      "  };\r",
      "\r",
      "  onButtonClick_add = () => {\r",
      "    if (this.state.title === '') return;\r",
      "    const newTodo = { title: this.state.title };\r",
      "    this.props.addNewTodoStart(newTodo);\r",
      "  };\r",
      "\r",
      "  render() {\r",
      "    return (\r",
      "      <div className=\"todos\">\r",
      "        title:\r",
      "        <input onChange={this.onInputChange_title} />\r",
      "        <button onClick={this.onButtonClick_add}>Add</button>\r",
      "        {this.props.todos.map((todo, index) => {\r",
      "          return (\r",
      "            <div className=\"todos-row\" key={index}>\r",
      "              <Todo todo={todo} />\r",
      "            </div>\r",
      "          );\r",
      "        })}\r",
      "      </div>\r",
      "    );\r",
      "  }\r",
      "}\r",
      "\r",
      "const mapStateToProps = state => {\r",
      "  const todos = state.todos && state.todos.todos;\r",
      "  return { todos };\r",
      "};\r",
      "const mapDispatchToProps = {\r",
      "  getAllTodosStart,\r",
      "  addNewTodoStart,\r",
      "  deleteTodoStart\r",
      "};\r",
      "\r",
      "export default connect(mapStateToProps, mapDispatchToProps)(Todos);\r",
      ""
    ]
  }
}
