{
	"Redux Store": {
		"prefix": "ccReactJS_TypeScript_ReduxStore",
		"body": [
			"import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';",
			"",
			"import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"",
			"type CounterStateType = {",
			"\tvalue: number;",
			"};",
			"",
			"const initialCounterState = { value: 0 } as CounterStateType;",
			"",
			"const counterSlice = createSlice({",
			"\tname: 'counter',",
			"\tinitialState: initialCounterState,",
			"\treducers: {",
			"\t\tincrement(state: { value: number }) {",
			"\t\t\tstate.value++;",
			"\t\t},",
			"\t\tdecrement(state: { value: number }) {",
			"\t\t\tstate.value--;",
			"\t\t},",
			"\t\tincrementByAmount(state: { value: number }, action: PayloadAction<number>) {",
			"\t\t\tstate.value += action.payload;",
			"\t\t},",
			"\t},",
			"});",
			"",
			"export const { increment, decrement, incrementByAmount } = counterSlice.actions;",
			"// export default counterSlice.reducer;",
			"",
			"export const reduxStore = configureStore({",
			"\treducer: {",
			"\t\tcounter: counterSlice.reducer,",
			"\t},",
			"});",
			"",
			"export type RootState = ReturnType<typeof reduxStore.getState>;",
			"export type AppDispatch = typeof reduxStore.dispatch;",
			"export const useAppDispatch = () => useDispatch<AppDispatch>();",
			"export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;",
			""
		],
		"description": "fsd"
	},
	"RootReducer": {
		"prefix": "ccReactJS_TypeScript_RootReducer",
		"body": [
			"import { combineReducers } from '@reduxjs/toolkit';",
			"",
			"import ${1:__featureName__}Reducer from 'features/${1:__featureName__}/${1:__featureName__}Slice';",
			"",
			"const rootReducer = combineReducers({",
			"\t${1:__featureName__}: ${1:__featureName__}Reducer,",
			"});",
			"",
			"export type RootState = ReturnType<typeof rootReducer>;",
			"",
			"export default rootReducer;",
			""
		]
	},
	"Redux Slice": {
		"prefix": "ccReactJS_TypeScript_ReduxSlice",
		"body": [
			"import { createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"import { ${1:__SliceName__}, get${1:__SliceName__}s } from './${1:__SliceName__}API';",
			"import { AppThunk } from 'app/store';",
			"",
			"interface ${1:__SliceName__}sState {",
			"\t${1:__SliceName__}s: Record<number, ${1:__SliceName__}[] | undefined>;",
			"\tloading: boolean;",
			"\terror: string | null;",
			"}",
			"",
			"interface ${1:__SliceName__}Loaded {",
			"\t${1:__SliceName__}s: ${1:__SliceName__}[];",
			"}",
			"",
			"const initialState: ${1:__SliceName__}sState = {",
			"\t${1:__SliceName__}s: [],",
			"\tloading: false,",
			"\terror: null,",
			"};",
			"",
			"const ${1:__SliceName__}s = createSlice({",
			"\tname: '${1:__SliceName__}s',",
			"\tinitialState,",
			"\treducers: {",
			"\t\tget${1:__SliceName__}sStart(state) {",
			"\t\t\tstate.loading = true;",
			"\t\t\tstate.error = null;",
			"\t\t},",
			"\t\tget${1:__SliceName__}sSuccess(state, action: PayloadAction<${1:__SliceName__}Loaded>) {",
			"\t\t\tstate.${1:__SliceName__}s = action.payload;",
			"\t\t},",
			"\t\tget${1:__SliceName__}sFailure(state, action: PayloadAction<string>) {",
			"\t\t\tstate.loading = false;",
			"\t\t\tstate.error = action.payload;",
			"\t\t},",
			"\t},",
			"});",
			"",
			"export const {",
			"\tget${1:__SliceName__}sStart,",
			"\tget${1:__SliceName__}sSuccess,",
			"\tget${1:__SliceName__}sFailure,",
			"} = ${1:__SliceName__}s.actions;",
			"",
			"export default ${1:__SliceName__}s.reducer;",
			"",
			"export const fetch${1:__SliceName__}s = (): AppThunk => async (dispatch) => {",
			"\ttry {",
			"\t\tdispatch(get${1:__SliceName__}sStart());",
			"\t\tconst ${1:__SliceName__}s = await get${1:__SliceName__}s(issue.${1:__SliceName__}s_url);",
			"\t\tdispatch(get${1:__SliceName__}sSuccess({ issueId: issue.number, ${1:__SliceName__}s }));",
			"\t} catch (err) {",
			"\t\tdispatch(get${1:__SliceName__}sFailure(err));",
			"\t}",
			"};",
			""
		]
	}
}
