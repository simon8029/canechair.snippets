{
	"ReduxStore": {
		"prefix": "ccRedux_Store",
		"body": [
			"import { configureStore } from '@reduxjs/toolkit';",
			"import ${1:__SliceName__}Reducer from './${1:__SliceName__}Slice';",
			"export default configureStore({",
			"\treducer: {",
			"\t\t${1:__SliceName__}: ${1:__SliceName__}Reducer,",
			"\t},",
			"});",
			""
		],
		"description": "Create Redux Store."
	},
	"ReduxSlice_BasicCRUD": {
		"prefix": "ccRedux_Slice_BasicCRUD",
		"body": [
			"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';",
			"import axios from 'axios';",
			"",
			"const initialState = {",
			"\tisLoading: false,",
			"\t${1/^(.)(.*)$/${1:/downcase}${2}/}List: [],",
			"};",
			"",
			"const BaseUrl = 'http://localhost:8029';",
			"",
			"export const get${1:__SliceName__}s = createAsyncThunk('${1:__SliceName__}/GETALL', async () => {",
			"\tconst response = await axios.get(`\\${BaseUrl}/${1:__SliceName__}`);",
			"\treturn response.data;",
			"});",
			"",
			"export const addNew${1:__SliceName__} = createAsyncThunk('${1:__SliceName__}/ADD', async (new${1:__SliceName__}) => {",
			"\tconst response = await axios.post(`\\${BaseUrl}/${1:__SliceName__}`, new${1:__SliceName__});",
			"\treturn response.data;",
			"});",
			"",
			"export const update${1:__SliceName__} = createAsyncThunk('${1:__SliceName__}/UPDATE', async (updated${1:__SliceName__}) => {",
			"\tconst response = await axios.put(`\\${BaseUrl}/${1:__SliceName__}/${updated${1:__SliceName__}.id}`, updated${1:__SliceName__});",
			"\treturn response.data;",
			"});",
			"",
			"export const delete${1:__SliceName__} = createAsyncThunk('${1:__SliceName__}/DELETE', async (id) => {",
			"\tconst response = await axios.delete(`\\${BaseUrl}/${1:__SliceName__}/\\${id}`);",
			"\treturn response.data;",
			"});",
			"",
			"const ${1/^(.)(.*)$/${1:/downcase}${2}/}Slice = createSlice({",
			"\tname: '${1/^(.)(.*)$/${1:/downcase}${2}/}',",
			"\tinitialState,",
			"\treducers: {},",
			"\textraReducers: (builder) => {",
			"\t\tbuilder.addCase(get${1:__SliceName__}s.pending, (state) => {",
			"\t\t\tstate.isLoading = true;",
			"\t\t});",
			"\t\tbuilder.addCase(get${1:__SliceName__}s.fulfilled, (state, action) => {",
			"\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = action.payload;",
			"\t\t});",
			"\t\tbuilder.addCase(get${1:__SliceName__}s.rejected, () => {});",
			"\t\tbuilder.addCase(addNew${1:__SliceName__}.pending, (state) => {",
			"\t\t\tstate.isLoading = true;",
			"\t\t});",
			"\t\tbuilder.addCase(addNew${1:__SliceName__}.fulfilled, (state, action) => {",
			"\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = [...state.${1/^(.)(.*)$/${1:/downcase}${2}/}List, action.payload];",
			"\t\t});",
			"\t\tbuilder.addCase(addNew${1:__SliceName__}.rejected, () => {});",
			"\t\tbuilder.addCase(update${1:__SliceName__}.pending, (state) => {",
			"\t\t\tstate.isLoading = true;",
			"\t\t});",
			"\t\tbuilder.addCase(update${1:__SliceName__}.fulfilled, (state, action) => {",
			"\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((${1/^(.)(.*)$/${1:/downcase}${2}/}) => {",
			"\t\t\t\tif (${1/^(.)(.*)$/${1:/downcase}${2}/}.id === action.payload.id) {",
			"\t\t\t\t\treturn action.payload;",
			"\t\t\t\t}",
			"\t\t\t\treturn ${1/^(.)(.*)$/${1:/downcase}${2}/};",
			"\t\t\t});",
			"\t\t});",
			"\t\tbuilder.addCase(update${1:__SliceName__}.rejected, () => {});",
			"\t\tbuilder.addCase(delete${1:__SliceName__}.pending, (state) => {",
			"\t\t\tstate.isLoading = true;",
			"\t\t});",
			"\t\tbuilder.addCase(delete${1:__SliceName__}.fulfilled, (state, action) => {",
			"\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.filter((${1/^(.)(.*)$/${1:/downcase}${2}/}) => ${1/^(.)(.*)$/${1:/downcase}${2}/}.id !== action.meta.arg);",
			"\t\t});",
			"\t\tbuilder.addCase(delete${1:__SliceName__}.rejected, () => {});",
			"\t},",
			"});",
			"",
			"export default ${1/^(.)(.*)$/${1:/downcase}${2}/}Slice.reducer;",
			""
		],
		"description": "Create basic CRUD Redux Slice"
	},
	"JavaScript : ArrowFunction": {
		"prefix": "ccJavascript_ArrowFunction",
		"body": ["const ${1:__FunctionName__} = () => {${0}};"],
		"description": "Create Arrow Function"
	},
	"JavaScript : useSelector": {
		"prefix": "ccJavascript_useSelector",
		"body": ["const ${1:__Name__} = useSelector(state => state.${1:__Name__});"],
		"description": "Create useSelector statement"
	},
	"JavaScript : useState": {
		"prefix": "ccJavascript_useState",
		"body": ["const [${1:__StateName__}, set${1/^(.)(.*)$/${1:/upcase}${2}/}] = useState(${2});${0}"],
		"description": "Create useState statement"
	},
	"JavaScript : FunctionalComponent": {
		"prefix": "ccJavaScript_FunctionalComponent",
		"body": [
			"import React from 'react';",
			"import { useState, useEffect } from 'react';",
			"import { useDispatch, useSelector } from 'react-redux';",
			"",
			"const ${1:__ComponentName__} = (props) => {",
			"\treturn <div>${1:__ComponentName__} here.</div>;",
			"};",
			""
		],
		"description": "Create Functional Component"
	}
}
