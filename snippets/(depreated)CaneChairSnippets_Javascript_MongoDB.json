{
	"MongoDB : Config": {
		"prefix": "ccMongoDB_Config",
		"body": [
			"{",
			"\t\"mongodb\": {",
			"\t\t\"server\": \"localhost:32770\",",
			"\t\t\"database\": \"${1:__ModuleName__}_db_dev\",",
			"\t\t\"user\": null,",
			"\t\t\"password\": null",
			"\t}",
			"}",
			""
		],
		"description": "Create a MongoDB Config file"
	},
	"MongoDB : Model": {
		"prefix": "ccMongoDB_Model",
		"body": [
			"const cuid = require('cuid');",
            "const db = require('./db');",
            "const { isURL } = require('validator');",
            "",
            "const urlSchema = (options = {}) => {",
            "  const { required } = options;",
            "  return {",
            "    type: String,",
            "    required: !!required,",
            "    validate: {",
            "      validator: isURL,",
            "      message: (props) => `${props.value} is not a valid URL.`,",
            "    },",
            "  };",
            "};",
            "",
            "const ${1:__ModelName__} = db.model('${1:__ModelName__}', {",
            "  _id: { type: String, default: cuid },",
            "  description: { type: String, required: true },",
            "  imgThumb: { type: String, required: true },",
            "  img: { type: String, required: true },",
            "  link: urlSchema(),",
            "  userId: { type: String, required: true },",
            "  userName: { type: String, required: true },",
            "  userLink: urlSchema(),",
            "  tags: { type: [String], index: true },",
            "});",
            "",
            "const create = async (fields) => {",
            "  const ${1/^(.)(.*)$/${1:/downcase}${2}/} = await new ${1:__ModelName__}(fields).save();",
            "  return ${1/^(.)(.*)$/${1:/downcase}${2}/};",
            "};",
            "",
            "const list = async (options = {}) => {",
            "  const { offset = 0, limit = 25, tag } = options;",
            "  const query = tag ? { tags: tag } : {};",
            "  const ${1/^(.)(.*)$/${1:/downcase}${2}/}s = await ${1:__ModelName__}.find(query)",
            "    .sort({ _id: 1 })",
            "    .skip(offset)",
            "    .limit(limit);",
            "",
            "  return ${1/^(.)(.*)$/${1:/downcase}${2}/}s;",
            "};",
            "",
            "const get = async (id) => {",
            "  const ${1/^(.)(.*)$/${1:/downcase}${2}/} = await ${1:__ModelName__}.findById(id);",
            "",
            "  return ${1/^(.)(.*)$/${1:/downcase}${2}/};",
            "};",
            "",
            "const edit = async (id, change) => {",
            "  const ${1/^(.)(.*)$/${1:/downcase}${2}/} = await get(id);",
            "  Object.keys(change).forEach((key) => {",
            "    ${1/^(.)(.*)$/${1:/downcase}${2}/}[key] = change[key];",
            "  });",
            "",
            "  await ${1/^(.)(.*)$/${1:/downcase}${2}/}.save();",
            "",
            "  return ${1/^(.)(.*)$/${1:/downcase}${2}/};",
            "};",
            "",
            "const remove = async (id) => {",
			"  const ${1/^(.)(.*)$/${1:/downcase}${2}/} = await get(id);",
			"",
            "  return await ${1:__ModelName__}.deleteOne(${1/^(.)(.*)$/${1:/downcase}${2}/});",
            "};",
            "",
            "module.exports = { list, get, create, edit, remove };",
            ""
		],
		"description": "Create MongoDB Model"
	},
	"MongoDB : Util": {
		"prefix": "ccMongoDB_Util",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tmodule.exports = {",
			"\t\tinit: init,",
			"\t};",
			"",
			"\tvar mongoose = require('mongoose');",
			"",
			"\tvar mongodbConfig = require('../../config/mongodb/mongodb-config').mongodb;",
			"",
			"\tfunction init() {",
			"\t\tvar options = {",
			"\t\t\tpromiseLibrary: require('bluebird'),",
			"\t\t\tuseNewUrlParser: true,",
			"\t\t};",
			"",
			"\t\tvar connectionString = prepareConnectionString(mongodbConfig);",
			"",
			"\t\tmongoose",
			"\t\t\t.connect(",
			"\t\t\t\tconnectionString,",
			"\t\t\t\toptions,",
			"\t\t\t)",
			"\t\t\t.then(function(result) {",
			"\t\t\t\t//console.log(\"MongoDB connection successful. DB: \" + connectionString);",
			"\t\t\t})",
			"\t\t\t.catch(function(error) {",
			"\t\t\t\tconsole.log(error.message);",
			"\t\t\t\tconsole.log(",
			"\t\t\t\t\t'Error occurred while connecting to DB: : ' + connectionString,",
			"\t\t\t\t);",
			"\t\t\t});",
			"\t}",
			"",
			"\tfunction prepareConnectionString(config) {",
			"\t\tvar connectionString = 'mongodb://';",
			"",
			"\t\tif (config.user) {",
			"\t\t\tconnectionString += config.user + ':' + config.password + '@';",
			"\t\t}",
			"",
			"\t\tconnectionString += config.server + '/' + config.database;",
			"",
			"\t\treturn connectionString;",
			"\t}",
			"})();",
			""
		],
		"description": "Create MongoDB Util"
	},
	"MongoDB : Module": {
		"prefix": "ccMongoDB_Module",
		"body": [
			"(function() {",
			"\t'use strict';",
			"",
			"\tmodule.exports = {",
			"\t\tMongoDBUtil: require('./mongodb.util'),",
			"\t};",
			"})();",
			""
		],
		"description": "Create MongoDB Module"
	}
}
