{
	"useState": {
		"prefix": "ccJS_TypeScript_useState",
		"body": [
			"const [${1:__StateName__}, set${1/^(.)(.*)$/${1:/upcase}${2}/}] = React.useState<${2:__StateDataType__}>(${0});"
		]
	},
	"useMemo": {
		"prefix": "ccJS_useMemo",
		"body": ["\tconst ${1:__memoName__} = useMemo(() => {", "\t\t${0}", "\t}, [${2:__deps__}]);"]
	},
	"useEffect": {
		"prefix": "ccJS_useEffect",
		"body": ["\tconst ${1:__effectName__} = useEffect(() => {", "\t\t${0}", "\t}, [${2:__deps__}]);"]
	},
	"useCustomHook": {
		"prefix": "ccJS_TypeScript_useCustomHook",
		"body": [
			"export function use${1:__CustomHookName__}() {",
			"  const [${1:__CustomHookName__}State, set${1:__CustomHookName__}State] = React.useState(false);",
			"  const 1/^(.)(.*)$/${1:/downcase}${2}/ = (aPromise: Promise<any>) => {",
			"    set${1:__CustomHookName__}State(true);",
			"    return aPromise.finally(() => set${1:__CustomHookName__}State(false));",
			"  };",
			"  return [${1:__CustomHookName__}State, 1/^(.)(.*)$/${1:/downcase}${2}/] as const;",
			"}"
		],
		"description": "use${__CustomHookName__}"
	},
	"Functional Component": {
		"prefix": "ccReactJS_TypeScript_FunctionalComponent",
		"body": [
			"import React from 'react'",
			"",
			"type ${1:__ComponentName__}Props = {",
			"  children: React.ReactNode;",
			"}",
			"",
			"export const ${1:__ComponentName__} = (props:${1:__ComponentName__}Props) => {",
			"  return <>${1:__ComponentName__} here.</>",
			"}",
			"",
			""
		],
		"description": "Functional Component"
	},
	"Common : IIFE": {
		"prefix": "ccCommon_IIFE",
		"body": ["(function() {", "\t'use strict';", "", "\tmodule.exports = {${1}};", "})();"],
		"description": "Create an IIFE function."
	},
	"Common : PrintToConsole : Group": {
		"prefix": "cclog_group",
		"body": [
			"console.group('${1:__GroupName__}')",
			"console.log(`${2:__output__}:`, ${2:__output__});",
			"console.groupEnd()"
		]
	},
	"Common : PrintToConsole : Group : withColor": {
		"prefix": "cclog_group_withColor",
		"body": [
			"console.group('${1:__GroupName__}')",
			"console.log(",
			"\t`%c${2:__output__}: %c${${2:__output__}}`,",
			"\t'color:black;font-weight:bold',",
			"\t'color:blue; background:lightgrey;padding:3px',",
			");",
			"console.groupEnd()"
		]
	},
	"Common : PrintToConsole": {
		"prefix": "cclog",
		"body": ["console.log(`${1:__output__}:`, ${1:__output__});"]
	},
	"Common : PrintToConsole : withColor": {
		"prefix": "cclog_withColor",
		"body": [
			"console.log(",
			"\t`%c${1:__output__}: %c${${1:__output__}}`,",
			"\t'color:black;font-weight:bold',",
			"\t'color:blue; background:lightgrey;padding:3px',",
			");"
		]
	},
	"Common : Import : Module": {
		"prefix": "ccCommon_Import_Module",
		"body": ["import ${0} from '${1:__modulePath__}';"],
		"description": "Import module."
	},
	"Common : Require": {
		"prefix": "ccCommon_Require",
		"body": ["const ${0} = require('${1:__moduleName__}');"],
		"description": "Require module"
	},
	"Common : Class : Constructor": {
		"prefix": "ccReact_Class_Constructor",
		"body": ["constructor(props) {", "\tsuper(props);", "\tthis.state = {", "\t\t${1} ", "\t}", "}"],
		"description": "Create a React Class."
	},
	"Common : Function : If": {
		"prefix": "ccCommon_Function_If",
		"body": ["if (${1:__condition__}) {", "\t${2:__statement__}", "}"],
		"description": "Create a standard If statement."
	},
	"Common : Function : Switch": {
		"prefix": "ccCommon_Function_Switch",
		"body": [
			"switch (${1:__key__}) {",
			"\tcase ${2:__value__}:",
			"\t\t${3:__statement__}",
			"\t\tbreak;",
			"\tdefault:",
			"\t\tbreak;",
			"}"
		],
		"description": "Create a standard switch statement."
	},
	"ReactJS : Function : SetState": {
		"prefix": "ccCommon_Function_SetState",
		"body": ["this.setState({ ${1} });"],
		"description": "Create this.SetState() method (TypeScript)"
	},
	"Common : Object : Assign": {
		"prefix": "ccCommon_Object_Assign",
		"body": ["Object.assign({}, ${1:__originalObject__}, { ${2:__Properties__} });"],
		"description": "Create a Object.assign() statement."
	},
	"Common : Array : Map": {
		"prefix": "ccCommon_Array_Map",
		"body": ["${1:__arrayName__}.map((${2:__params__}) => ", "\t${3}", ")"],
		"description": "Create a Array.map() function."
	},
	"Common : Array : Filter": {
		"prefix": "ccCommon_Array_Filter",
		"body": ["${1:__arrayName__}.filter((${2:__params__}) => ${3} );"],
		"description": "Create a Array.filter() function."
	},
	"Common : Array : Find": {
		"prefix": "ccCommon_Array_Find",
		"body": ["${1:__arrayName__}.find((${2:__params__}) => ${3} );"],
		"description": "Create a Array.find() function."
	},
	"Common : Array : FindIndex": {
		"prefix": "ccCommon_Array_FindIndex",
		"body": ["${1:__arrayName__}.findIndex((${2:__params__}) => ${3});"],
		"description": "Create a Array.findIndex() function."
	},
	"Common : Array : ForEach": {
		"prefix": "ccCommon_Array_ForEach",
		"body": ["${1:__arrayName__}.forEach(${2:__element__} => {", "\t${3:__statement__}", "});"],
		"description": "Create a Array.forEach() function."
	},
	"Arrow Function": {
		"prefix": "ccTS_Arrow_Function",
		"body": ["\tconst ${1:__FunctionName__}: ${2:__Type__} = (${3:__args__}) => {", "\t\t${0}", "\t};"]
	},
	"index.tsx": {
		"prefix": "ccTS_index.tsx",
		"body": [
			"import React from 'react';",
			"import ReactDOM from 'react-dom';",
			"import { Provider } from 'react-redux';",
			"import App from './app/App';",
			"import store from './app/store';",
			"import reportWebVitals from './reportWebVitals';",
			"",
			"ReactDOM.render(",
			"\t<Provider store={store}>",
			"\t\t<App />",
			"\t</Provider>,",
			"\tdocument.getElementById('root'),",
			");",
			"",
			"// If you want to start measuring performance in your app, pass a function",
			"// to log results (for example: reportWebVitals(console.log))",
			"// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals",
			"reportWebVitals();",
			""
		]
	},
	"Form": {
		"prefix": "ccTS_Form",
		"body": [
			"<form>",
			"\t\t\t<div>",
			"\t\t\t\t<label htmlFor='input1'>Input:</label>",
			"\t\t\t\t<input name='input1' value={inputValue} onChange={onInputChanged} />",
			"\t\t\t\t<button type='button' onClick={onButtonClicked}>",
			"\t\t\t\t\tButton",
			"\t\t\t\t</button>",
			"\t\t\t</div>",
			"\t\t</form>"
		]
	}
}
