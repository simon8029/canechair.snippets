{
	"useState": {
		"prefix": "ccTypeScript_useState",
		"body": [
			"const [${1:__StateName__}, set${1/^(.)(.*)$/${1:/upcase}${2}/}] = React.useState<${2:__StateDataType__}>(${0});"
		]
	},
	"useMemo": {
		"prefix": "ccJS_useMemo",
		"body": [
			"\tconst ${1:__memoName__} = useMemo(() => {",
			"\t\t${0}",
			"\t}, [${2:__deps__}]);"
		]
	},
	"useEffect": {
		"prefix": "ccJS_useEffect",
		"body": [
			"useEffect(() => {",
			"\t\t${0}",
			"\t}, [${1:__deps__}]);"
		]
	},
	"useCustomHook": {
		"prefix": "ccTypeScript_useCustomHook",
		"body": [
			"export function use${1:__CustomHookName__}() {",
			"  const [${1:__CustomHookName__}State, set${1:__CustomHookName__}State] = React.useState(false);",
			"  const 1/^(.)(.*)$/${1:/downcase}${2}/ = (aPromise: Promise<any>) => {",
			"    set${1:__CustomHookName__}State(true);",
			"    return aPromise.finally(() => set${1:__CustomHookName__}State(false));",
			"  };",
			"  return [${1:__CustomHookName__}State, 1/^(.)(.*)$/${1:/downcase}${2}/] as const;",
			"}"
		],
		"description": "use${__CustomHookName__}"
	},
	"Functional Component": {
		"prefix": "ccTypeScript_FunctionalComponent",
		"body": [
			"import React from 'react'",
			"import { useAppDispatch, useAppSelector } from '../../Redux/store'",
			"import styled from 'styled-components'",
			"",
			"type ${1:__ComponentName__}Props = {}",
			"const ${1:__ComponentName__}Container = styled.div`",
			"  display: flex;",
			"  flex-direction: column;",
			"  box-shadow: ${props => props.theme.testBoxShadow};",
			"  padding: ${props => props.theme.componentPadding};",
			"`",
			"",
			"export const ${1:__ComponentName__} = (props: ${1:__ComponentName__}Props) => {",
			"  const dispatch = useAppDispatch()",
			"  const ${1/^(.)(.*)$/${1:/downcase}${2}/}List = useAppSelector(state => state.${1/^(.)(.*)$/${1:/downcase}${2}/}Slice.${1/^(.)(.*)$/${1:/downcase}${2}/}List)",
			"",
			"  return (",
			"    <${1:__ComponentName__}Container>${1:__ComponentName__} component is here.</${1:__ComponentName__}Container>",
			"  )",
			"}",
			""
		],
		"description": "Create Functional Component"
	},
	"Arrow Function": {
		"prefix": "ccTypeScript_Arrow_Function",
		"body": [
			"\tconst ${1:__FunctionName__} = (${2:__args__}): ${3:__Type__}  => {",
			"\t\t${0}",
			"\t};"
		]
	},
	"index.tsx": {
		"prefix": "ccTypeScript_index.tsx",
		"body": [
			"import React from 'react';",
			"import ReactDOM from 'react-dom';",
			"import { Provider } from 'react-redux';",
			"import App from './app/App';",
			"import store from './app/store';",
			"import reportWebVitals from './reportWebVitals';",
			"",
			"ReactDOM.render(",
			"\t<Provider store={store}>",
			"\t\t<App />",
			"\t</Provider>,",
			"\tdocument.getElementById('root'),",
			");",
			"",
			"// If you want to start measuring performance in your app, pass a function",
			"// to log results (for example: reportWebVitals(console.log))",
			"// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals",
			"reportWebVitals();",
			""
		]
	},
	"Form": {
		"prefix": "ccTypeScript_Form",
		"body": [
			"<form>",
			"\t\t\t<div>",
			"\t\t\t\t<label htmlFor='input1'>Input:</label>",
			"\t\t\t\t<input name='input1' value={inputValue} onChange={onInputChanged} />",
			"\t\t\t\t<button type='button' onClick={onButtonClicked}>",
			"\t\t\t\t\tButton",
			"\t\t\t\t</button>",
			"\t\t\t</div>",
			"\t\t</form>"
		]
	},
	"Redux : Slice : AsyncThunk : Fetch": {
		"prefix": "ccRedux_Slice_AsyncThunk_fetch",
		"body": [
			"export const fetch${1:__EntityName__} = createAsyncThunk<${1:__EntityName__}[]>(",
			"  \"${1:__EntityName__}/Fetch\",",
			"  async () => {",
			"    const response = await axios.get(`\\${url}`);",
			"    return response.data;",
			"  }",
			");"
		],
		"description": "Create Async Thunk for Fetch"
	},
	"Redux : Slice : AsyncThunk : Add": {
		"prefix": "ccRedux_Slice_AsyncThunk_Add",
		"body": [
			"export const add${1:__EntityName__}  = createAsyncThunk(",
			"  \"${1:__EntityName__} /Add\",",
			"  async (${1/^(.)(.*)$/${1:/downcase}${2}/}: ${1:__EntityName__} ) => {",
			"    const response = await axios.post(`\\${url}`, ${1/^(.)(.*)$/${1:/downcase}${2}/});",
			"    return response.data;",
			"  }",
			");"
		],
		"description": "Create Async Thunk for Add"
	},
	"Redux : Slice : AsyncThunk : Update": {
		"prefix": "ccRedux_Slice_AsyncThunk_Update",
		"body": [
			"export const update${1:__EntityName__} = createAsyncThunk(",
			"  \"${1:__EntityName__}/Update\",",
			"  async (${1/^(.)(.*)$/${1:/downcase}${2}/}: ${1:__EntityName__}) => {",
			"    const response = await axios.put(`\\${url}/${${1/^(.)(.*)$/${1:/downcase}${2}/}.id}`, ${1/^(.)(.*)$/${1:/downcase}${2}/});",
			"    return response.data;",
			"  }",
			");"
		],
		"description": "Create Async Thunk for Update"
	},
	"Redux : Slice : AsyncThunk : Delete": {
		"prefix": "ccRedux_Slice_AsyncThunk_Delete",
		"body": [
			"export const delete${1:__EntityName__} = createAsyncThunk<void, string>(",
			"  \"${1:__EntityName__}/Delete\",",
			"  async (id: string) => {",
			"    const response = await axios.delete(`\\${url}/\\${id}`);",
			"    return response.data;",
			"  }",
			");"
		],
		"description": "Create Async Thunk for Delete"
	},
	"Redux : Slice : ExtraReducers : Fetch": {
		"prefix": "ccRedux_Slice_ExtraReducers_Fetch",
		"body": [
			".addCase(fetch${1:__EntityName__}.pending, (state, action) => {",
			"  state.status = \"loading\";",
			"})",
			".addCase(fetch${1:__EntityName__}.fulfilled, (state, action) => {",
			"  state.status = \"succeeded\";",
			"  action.payload.map((item) => {",
			"    state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.push(item);",
			"  });",
			"})",
			".addCase(fetch${1:__EntityName__}.rejected, (state, action) => {",
			"  state.status = \"failed\";",
			"  state.error = action.error.message;",
			"});"
		],
		"description": "Create extra reducers for Fetch"
	},
	"Redux : Slice : ExtraReducers : Add": {
		"prefix": "ccRedux_Slice_ExtraReducers_Add",
		"body": [
			".addCase(add${1:__EntityName__}.pending, (state, action) => {",
			"  state.status = \"loading\";",
			"})",
			".addCase(add${1:__EntityName__}.fulfilled, (state, action) => {",
			"  state.status = \"succeeded\";",
			"  state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.push(action.payload);",
			"})",
			".addCase(add${1:__EntityName__}.rejected, (state, action) => {",
			"  state.status = \"failed\";",
			"  state.error = action.error.message;",
			"});"
		],
		"description": "Create extra reducers for Add"
	},
	"Redux : Slice : ExtraReducers : Update": {
		"prefix": "ccRedux_Slice_ExtraReducers_Update",
		"body": [
			".addCase(update${1:__EntityName__}.pending, (state, action) => {",
			"  state.status = \"loading\";",
			"})",
			".addCase(update${1:__EntityName__}.fulfilled, (state, action) => {",
			"  state.status = \"succeeded\";",
			"  const new${1:__EntityName__}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((${1/^(.)(.*)$/${1:/downcase}${2}/}: ${1:__EntityName__}) => {",
			"    if (${1/^(.)(.*)$/${1:/downcase}${2}/}.id === action.payload.id) {",
			"      return action.payload;",
			"    }",
			"    return ${1/^(.)(.*)$/${1:/downcase}${2}/};",
			"  });",
			"",
			"  state.${1/^(.)(.*)$/${1:/downcase}${2}/}List = new${1:__EntityName__}List;",
			"})",
			".addCase(update${1:__EntityName__}.rejected, (state, action) => {",
			"  state.status = \"failed\";",
			"  state.error = action.error.message;",
			"})"
		],
		"description": "Create extra reducers for Update"
	},
	"Redux : Slice : ExtraReducers : Delete": {
		"prefix": "ccRedux_Slice_ExtraReducers_Delete",
		"body": [
			" .addCase(delete${1:__EntityName__}.pending, (state, action) => {",
			"  state.status = \"loading\";",
			"})",
			".addCase(delete${1:__EntityName__}.fulfilled, (state, action) => {",
			"  state.status = \"succeeded\";",
			"  const new${1:__EntityName__}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.filter((entity: ${1:__EntityName__}) => {",
			"    return entity.id !== action.meta.arg;",
			"  });",
			"",
			"  state.${1/^(.)(.*)$/${1:/downcase}${2}/}List = new${1:__EntityName__}List;",
			"})",
			".addCase(delete${1:__EntityName__}.rejected, (state, action) => {",
			"  state.status = \"failed\";",
			"  state.error = action.error.message;",
			"});"
		],
		"description": "Create extra reducers for Delete"
	}
}