{
	"useState": {
		"prefix": "ccTypeScript_useState",
		"body": [
			"const [${1:__StateName__}, set${1/^(.)(.*)$/${1:/upcase}${2}/}] = React.useState<${2:__StateDataType__}>(${0});"
		]
	},
	"useMemo": {
		"prefix": "ccJS_useMemo",
		"body": [
			"\tconst ${1:__memoName__} = useMemo(() => {",
			"\t\t${0}",
			"\t}, [${2:__deps__}]);"
		]
	},
	"useEffect": {
		"prefix": "ccJS_useEffect",
		"body": [
			"useEffect(() => {",
			"\t\t${0}",
			"\t}, [${1:__deps__}]);"
		]
	},
	"useCustomHook": {
		"prefix": "ccTypeScript_useCustomHook",
		"body": [
			"export function use${1:__CustomHookName__}() {",
			"  const [${1:__CustomHookName__}State, set${1:__CustomHookName__}State] = React.useState(false);",
			"  const 1/^(.)(.*)$/${1:/downcase}${2}/ = (aPromise: Promise<any>) => {",
			"    set${1:__CustomHookName__}State(true);",
			"    return aPromise.finally(() => set${1:__CustomHookName__}State(false));",
			"  };",
			"  return [${1:__CustomHookName__}State, 1/^(.)(.*)$/${1:/downcase}${2}/] as const;",
			"}"
		],
		"description": "use${__CustomHookName__}"
	},
	"Arrow Function": {
		"prefix": "ccTypeScript_Arrow_Function",
		"body": [
			"\tconst ${1:__FunctionName__} = (${2:__args__}): ${3:__Type__}  => {",
			"\t\t${0}",
			"\t};"
		]
	},
	"ReactJS_TS_ReduxStore.ts": {
		"prefix": "ccReactJS_TS_ReduxStore.ts",
		"body": [
			"import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';",
			"",
			"import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"",
			"export const reduxStore = configureStore({",
			"\treducer: {},",
			"});",
			"",
			"export type RootState = ReturnType<typeof reduxStore.getState>;",
			"export type AppDispatch = typeof reduxStore.dispatch;",
			"export const useAppDispatch = () => useDispatch<AppDispatch>();",
			"export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;",
			""
		],
		"description": "Create a Redux Store file."
	},
	"index.tsx": {
		"prefix": "ccTypeScript_index.tsx",
		"body": [
			"import React from 'react';",
			"import ReactDOM from 'react-dom';",
			"import { Provider } from 'react-redux';",
			"import App from './app/App';",
			"import store from './app/store';",
			"import reportWebVitals from './reportWebVitals';",
			"",
			"ReactDOM.render(",
			"\t<Provider store={store}>",
			"\t\t<App />",
			"\t</Provider>,",
			"\tdocument.getElementById('root'),",
			");",
			"",
			"// If you want to start measuring performance in your app, pass a function",
			"// to log results (for example: reportWebVitals(console.log))",
			"// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals",
			"reportWebVitals();",
			""
		]
	},
	"Form": {
		"prefix": "ccTypeScript_Form",
		"body": [
			"<form>",
			"\t\t\t<div>",
			"\t\t\t\t<label htmlFor='input1'>Input:</label>",
			"\t\t\t\t<input name='input1' value={inputValue} onChange={onInputChanged} />",
			"\t\t\t\t<button type='button' onClick={onButtonClicked}>",
			"\t\t\t\t\tButton",
			"\t\t\t\t</button>",
			"\t\t\t</div>",
			"\t\t</form>"
		]
	},
	"Redux : Slice ": {
		"prefix": "ccRedux_Slice",
		"body": [
			"import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"",
			"interface ${1:__EntityName__} {",
			"  id: number;",
			"  title: string;",
			"  completed: boolean;",
			"}",
			"",
			"interface New${1:__EntityName__} {",
			"  title: string;",
			"  completed: boolean;",
			"}",
			"",
			"interface ${1:__EntityName__}sState {",
			"  items: ${1:__EntityName__}[];",
			"  status: 'idle' | 'loading' | 'succeeded' | 'failed';",
			"  error: string | null;",
			"}",
			"",
			"const initialState: ${1:__EntityName__}sState = {",
			"  items: [],",
			"  status: 'idle',",
			"  error: null,",
			"};",
			"",
			"const endpoint_baseUrl = \"https://api.example.com/${1/^(.)(.*)$/${1:/downcase}${2}/}\"",
			"export const fetch${1:__EntityName__}s = createAsyncThunk<${1:__EntityName__}[], undefined, { rejectValue: string }>(",
			"  '${1/^(.)(.*)$/${1:/downcase}${2}/}s/fetch${1:__EntityName__}s',",
			"  async (_, { rejectWithValue }) => {",
			"    try {",
			"      const response = await fetch(`${endpoint_baseUrl}`);",
			"      if (!response.ok) throw new Error('Failed to fetch ${1/^(.)(.*)$/${1:/downcase}${2}/}s.');",
			"      return await response.json();",
			"    } catch (error) {",
			"      return rejectWithValue((error as Error).message);",
			"    }",
			"  }",
			");",
			"",
			"export const add${1:__EntityName__} = createAsyncThunk<${1:__EntityName__}, New${1:__EntityName__}, { rejectValue: string }>(",
			"  '${1/^(.)(.*)$/${1:/downcase}${2}/}s/add${1:__EntityName__}',",
			"  async (${1/^(.)(.*)$/${1:/downcase}${2}/}, { rejectWithValue }) => {",
			"    try {",
			"      const response = await fetch(`${endpoint_baseUrl}`, {",
			"        method: 'POST',",
			"        headers: {",
			"          'Content-Type': 'application/json',",
			"        },",
			"        body: JSON.stringify(${1/^(.)(.*)$/${1:/downcase}${2}/}),",
			"      });",
			"      if (!response.ok) throw new Error('Failed to add ${1/^(.)(.*)$/${1:/downcase}${2}/}.');",
			"      return await response.json();",
			"    } catch (error) {",
			"      return rejectWithValue((error as Error).message);",
			"    }",
			"  }",
			");",
			"",
			"export const update${1:__EntityName__} = createAsyncThunk<${1:__EntityName__}, { id: number; data: Partial<${1:__EntityName__}> }, { rejectValue: string }>(",
			"  '${1/^(.)(.*)$/${1:/downcase}${2}/}s/update${1:__EntityName__}',",
			"  async ({ id, data }, { rejectWithValue }) => {",
			"    try {",
			"      const response = await fetch(`${endpoint_baseUrl}/${id}`, {",
			"        method: 'PUT',",
			"        headers: {",
			"          'Content-Type': 'application/json',",
			"        },",
			"        body: JSON.stringify(data),",
			"      });",
			"      if (!response.ok) throw new Error('Failed to update ${1/^(.)(.*)$/${1:/downcase}${2}/}.');",
			"      return await response.json();",
			"    } catch (error) {",
			"      return rejectWithValue((error as Error).message);",
			"    }",
			"  }",
			");",
			"",
			"export const delete${1:__EntityName__} = createAsyncThunk<number, number, { rejectValue: string }>(",
			"  '${1/^(.)(.*)$/${1:/downcase}${2}/}s/delete${1:__EntityName__}',",
			"  async (id, { rejectWithValue }) => {",
			"    try {",
			"      const response = await fetch(`${endpoint_baseUrl}/${id}`, {",
			"        method: 'DELETE',",
			"      });",
			"      if (!response.ok) throw new Error('Failed to delete ${1/^(.)(.*)$/${1:/downcase}${2}/}.');",
			"      return id;",
			"    } catch (error) {",
			"      return rejectWithValue((error as Error).message);",
			"    }",
			"  }",
			");",
			"",
			"const ${1/^(.)(.*)$/${1:/downcase}${2}/}sSlice = createSlice({",
			"  name: '${1/^(.)(.*)$/${1:/downcase}${2}/}s',",
			"  initialState,",
			"  reducers: {",
			"    addNew${1:__EntityName__}: (state, action: PayloadAction<{ title: string; completed: boolean }>) => {",
			"      const new${1:__EntityName__}: ${1:__EntityName__} = {",
			"        id: state.items.length + 1,",
			"        title: action.payload.title,",
			"        completed: action.payload.completed,",
			"      };",
			"      state.items.push(new${1:__EntityName__});",
			"    },",
			"  },",
			"  extraReducers: (builder) => {",
			"    builder",
			"      .addCase(fetch${1:__EntityName__}s.pending, (state) => {",
			"        state.status = 'loading';",
			"      })",
			"      .addCase(fetch${1:__EntityName__}s.fulfilled, (state, action: PayloadAction<${1:__EntityName__}[]>) => {",
			"        state.status = 'succeeded';",
			"        state.items = action.payload;",
			"      })",
			"      .addCase(fetch${1:__EntityName__}s.rejected, (state, action: PayloadAction<string | undefined>) => {",
			"        state.status = 'failed';",
			"        state.error = action.payload ?? null;",
			"      })",
			"      .addCase(add${1:__EntityName__}.pending, (state) => {",
			"        state.status = 'loading';",
			"      })",
			"      .addCase(add${1:__EntityName__}.fulfilled, (state, action: PayloadAction<${1:__EntityName__}>) => {",
			"        state.items.push(action.payload);",
			"        state.status = 'succeeded';",
			"      })",
			"      .addCase(add${1:__EntityName__}.rejected, (state, action: PayloadAction<string | undefined>) => {",
			"        state.status = 'failed';",
			"        state.error = action.payload ?? null;",
			"      })",
			"      .addCase(update${1:__EntityName__}.pending, (state) => {",
			"        state.status = 'loading';",
			"      })",
			"      .addCase(update${1:__EntityName__}.fulfilled, (state, action: PayloadAction<${1:__EntityName__}>) => {",
			"        const index = state.items.findIndex(${1/^(.)(.*)$/${1:/downcase}${2}/} => ${1/^(.)(.*)$/${1:/downcase}${2}/}.id === action.payload.id);",
			"        if (index !== -1) {",
			"          state.items[index] = action.payload;",
			"        }",
			"        state.status = 'succeeded';",
			"      })",
			"      .addCase(update${1:__EntityName__}.rejected, (state, action: PayloadAction<string | undefined>) => {",
			"        state.status = 'failed';",
			"        state.error = action.payload ?? null;",
			"      })",
			"      .addCase(delete${1:__EntityName__}.pending, (state) => {",
			"        state.status = 'loading';",
			"      })",
			"      .addCase(delete${1:__EntityName__}.fulfilled, (state, action: PayloadAction<number>) => {",
			"        state.items = state.items.filter(${1/^(.)(.*)$/${1:/downcase}${2}/} => ${1/^(.)(.*)$/${1:/downcase}${2}/}.id !== action.payload);",
			"        state.status = 'succeeded';",
			"      })",
			"      .addCase(delete${1:__EntityName__}.rejected, (state, action: PayloadAction<string | undefined>) => {",
			"        state.status = 'failed';",
			"        state.error = action.payload ?? null;",
			"      });",
			"  },",
			"});",
			"",
			"export const { addNew${1:__EntityName__} } = ${1/^(.)(.*)$/${1:/downcase}${2}/}sSlice.actions;",
			"export default ${1/^(.)(.*)$/${1:/downcase}${2}/}sSlice.reducer;",
			""
		],
		"description": "sdfsdf"
	},
	"Redux : Slice : AsyncThunk : Fetch": {
		"prefix": "ccRedux_Slice_AsyncThunk_fetch",
		"body": [
			"export const fetch${1:__EntityName__} = createAsyncThunk<${1:__EntityName__}[]>(",
			"  \"${1:__EntityName__}/Fetch\",",
			"  async () => {",
			"    const response = await axios.get(`\\${url}`);",
			"    return response.data;",
			"  }",
			");"
		],
		"description": "Create Async Thunk for Fetch"
	},
	"Redux : Slice : AsyncThunk : Add": {
		"prefix": "ccRedux_Slice_AsyncThunk_Add",
		"body": [
			"export const add${1:__EntityName__}  = createAsyncThunk(",
			"  \"${1:__EntityName__} /Add\",",
			"  async (${1/^(.)(.*)$/${1:/downcase}${2}/}: ${1:__EntityName__} ) => {",
			"    const response = await axios.post(`\\${url}`, ${1/^(.)(.*)$/${1:/downcase}${2}/});",
			"    return response.data;",
			"  }",
			");"
		],
		"description": "Create Async Thunk for Add"
	},
	"Redux : Slice : AsyncThunk : Update": {
		"prefix": "ccRedux_Slice_AsyncThunk_Update",
		"body": [
			"export const update${1:__EntityName__} = createAsyncThunk(",
			"  \"${1:__EntityName__}/Update\",",
			"  async (${1/^(.)(.*)$/${1:/downcase}${2}/}: ${1:__EntityName__}) => {",
			"    const response = await axios.put(`\\${url}/${${1/^(.)(.*)$/${1:/downcase}${2}/}.id}`, ${1/^(.)(.*)$/${1:/downcase}${2}/});",
			"    return response.data;",
			"  }",
			");"
		],
		"description": "Create Async Thunk for Update"
	},
	"Redux : Slice : AsyncThunk : Delete": {
		"prefix": "ccRedux_Slice_AsyncThunk_Delete",
		"body": [
			"export const delete${1:__EntityName__} = createAsyncThunk<void, string>(",
			"  \"${1:__EntityName__}/Delete\",",
			"  async (id: string) => {",
			"    const response = await axios.delete(`\\${url}/\\${id}`);",
			"    return response.data;",
			"  }",
			");"
		],
		"description": "Create Async Thunk for Delete"
	},
	"Redux : Slice : ExtraReducers : Fetch": {
		"prefix": "ccRedux_Slice_ExtraReducers_Fetch",
		"body": [
			".addCase(fetch${1:__EntityName__}.pending, (state, action) => {",
			"  state.status = \"loading\";",
			"})",
			".addCase(fetch${1:__EntityName__}.fulfilled, (state, action) => {",
			"  state.status = \"succeeded\";",
			"  action.payload.map((item) => {",
			"    state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.push(item);",
			"  });",
			"})",
			".addCase(fetch${1:__EntityName__}.rejected, (state, action) => {",
			"  state.status = \"failed\";",
			"  state.error = action.error.message;",
			"});"
		],
		"description": "Create extra reducers for Fetch"
	},
	"Redux : Slice : ExtraReducers : Add": {
		"prefix": "ccRedux_Slice_ExtraReducers_Add",
		"body": [
			".addCase(add${1:__EntityName__}.pending, (state, action) => {",
			"  state.status = \"loading\";",
			"})",
			".addCase(add${1:__EntityName__}.fulfilled, (state, action) => {",
			"  state.status = \"succeeded\";",
			"  state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.push(action.payload);",
			"})",
			".addCase(add${1:__EntityName__}.rejected, (state, action) => {",
			"  state.status = \"failed\";",
			"  state.error = action.error.message;",
			"});"
		],
		"description": "Create extra reducers for Add"
	},
	"Redux : Slice : ExtraReducers : Update": {
		"prefix": "ccRedux_Slice_ExtraReducers_Update",
		"body": [
			".addCase(update${1:__EntityName__}.pending, (state, action) => {",
			"  state.status = \"loading\";",
			"})",
			".addCase(update${1:__EntityName__}.fulfilled, (state, action) => {",
			"  state.status = \"succeeded\";",
			"  const new${1:__EntityName__}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((${1/^(.)(.*)$/${1:/downcase}${2}/}: ${1:__EntityName__}) => {",
			"    if (${1/^(.)(.*)$/${1:/downcase}${2}/}.id === action.payload.id) {",
			"      return action.payload;",
			"    }",
			"    return ${1/^(.)(.*)$/${1:/downcase}${2}/};",
			"  });",
			"",
			"  state.${1/^(.)(.*)$/${1:/downcase}${2}/}List = new${1:__EntityName__}List;",
			"})",
			".addCase(update${1:__EntityName__}.rejected, (state, action) => {",
			"  state.status = \"failed\";",
			"  state.error = action.error.message;",
			"})"
		],
		"description": "Create extra reducers for Update"
	},
	"Redux : Slice : ExtraReducers : Delete": {
		"prefix": "ccRedux_Slice_ExtraReducers_Delete",
		"body": [
			" .addCase(delete${1:__EntityName__}.pending, (state, action) => {",
			"  state.status = \"loading\";",
			"})",
			".addCase(delete${1:__EntityName__}.fulfilled, (state, action) => {",
			"  state.status = \"succeeded\";",
			"  const new${1:__EntityName__}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.filter((entity: ${1:__EntityName__}) => {",
			"    return entity.id !== action.meta.arg;",
			"  });",
			"",
			"  state.${1/^(.)(.*)$/${1:/downcase}${2}/}List = new${1:__EntityName__}List;",
			"})",
			".addCase(delete${1:__EntityName__}.rejected, (state, action) => {",
			"  state.status = \"failed\";",
			"  state.error = action.error.message;",
			"});"
		],
		"description": "Create extra reducers for Delete"
	},
	"Functional Component": {
		"prefix": "ccTypeScript_FunctionalComponent",
		"body": [
			"import React from 'react'",
			"import { useAppDispatch, useAppSelector } from '../Redux/store'",
			"import styled from 'styled-components'",
			"",
			"type ${1:__ComponentName__}Props = {}",
			"const ${1:__ComponentName__}Container = styled.div` `",
			"",
			"export const ${1:__ComponentName__} = (props: ${1:__ComponentName__}Props) => {",
			"  const dispatch = useAppDispatch()",
			"  const store = useAppSelector(store => store)",
			"",
			"  return (",
			"    <${1:__ComponentName__}Container>",
			"      ${1:__ComponentName__}",
			"    </${1:__ComponentName__}Container>",
			"  )",
			"}",
			""
		],
		"description": "Create Functional Component"
	},
	"ComponentMain": {
		"prefix": "ccTypescript_ComponentMain",
		"body": [
			"import { RowSelectedEvent } from 'ag-grid-community'",
			"import React, { useCallback } from 'react'",
			"import { useTranslation } from 'react-i18next'",
			"import styled from 'styled-components/macro'",
			"import { ComponentTypeEnum } from '../../enums/componentEnum'",
			"import { PDButton } from '../../PuffinDesignSystem/PDButton'",
			"import { PDComponentContainerBase } from '../../PuffinDesignSystem/PDComponentBase'",
			"import { PDModal } from '../../PuffinDesignSystem/PDModal'",
			"import { PDTable } from '../../PuffinDesignSystem/PDTable'",
			"import { useAppDispatch, useAppSelector } from '../../Redux/store'",
			"import { ${1:__ComponentName__}BaseComponent } from './${1/^(.)(.*)$/${1:/downcase}${2}/}.component.base'",
			"import { fetch${1:__ComponentName__}List } from './${1/^(.)(.*)$/${1:/downcase}${2}/}.slice'",
			"",
			"type ${1:__ComponentName__}MainComponentProps = {}",
			"const ComponentContainer = styled(PDComponentContainerBase)``",
			"const ContentSection = styled(PDComponentContainerBase)``",
			"",
			"",
			"export const ${1:__ComponentName__}MainComponent = (props: ${1:__ComponentName__}MainComponentProps) => {",
			"  const [componentType, setComponentType] = React.useState<ComponentTypeEnum>();",
			"  const [selected${1:__ComponentName__}Id, setSelected${1:__ComponentName__}Id] = React.useState<string>('');",
			"  const { t } = useTranslation();",
			"  const dispatch = useAppDispatch();",
			"  const ${1/^(.)(.*)$/${1:/downcase}${2}/}List = useAppSelector(state => state.${1/^(.)(.*)$/${1:/downcase}${2}/}Slice.${1/^(.)(.*)$/${1:/downcase}${2}/}List);",
			"",
			"  React.useEffect(() => {",
			"    if (!${1/^(.)(.*)$/${1:/downcase}${2}/}List.length) {",
			"      dispatch(fetch${1:__ComponentName__}List());",
			"    }",
			"  }, []);",
			"",
			"  const columnDefs = [",
			"    { field: 'id' },",
			"    { field: 'supplierName', headerName: t('supplier.supplierName')! },",
			"    //TODO: define columnDefs here...",
			"  ];",
			"",
			"  const onRowClicked = useCallback((e: RowSelectedEvent) => {",
			"    if (e.node.isSelected()) {",
			"      setSelected${1:__ComponentName__}Id(e.data.id);",
			"      setComponentType(ComponentTypeEnum.DETAILS);",
			"    }",
			"  }, []);",
			"",
			"",
			"",
			"  React.useEffect(() => {",
			"    console.log(`!!componentType:`, !!componentType);",
			"  }, [componentType]);",
			"  return (",
			"    <ComponentContainer>",
			"      <ContentSection>",
			"        <PDButton onClick={() => setComponentType(ComponentTypeEnum.CREATE)}>{t('${1/^(.)(.*)$/${1:/downcase}${2}/}.createNew${1:__ComponentName__}')}</PDButton>",
			"      </ContentSection>",
			"      <ContentSection>",
			"        <PDTable TableObjectType='${1:__ComponentName__}' columnDefs={columnDefs} data={${1/^(.)(.*)$/${1:/downcase}${2}/}List} onRowClicked={onRowClicked} />",
			"      </ContentSection>",
			"      <PDModal",
			"        isOpen={!!componentType}",
			"        onRequestClose={() => setComponentType(undefined)}",
			"        ariaHideApp={false}",
			"      >",
			"        {componentType === ComponentTypeEnum.CREATE && <${1:__ComponentName__}BaseComponent title={t('${1/^(.)(.*)$/${1:/downcase}${2}/}.createNew${1:__ComponentName__}')} close={() => setComponentType(undefined)} componentType={ComponentTypeEnum.CREATE} />}",
			"        {componentType === ComponentTypeEnum.DETAILS && <${1:__ComponentName__}BaseComponent title={t('${1/^(.)(.*)$/${1:/downcase}${2}/}.${1/^(.)(.*)$/${1:/downcase}${2}/}Info')} selected${1:__ComponentName__}Id={selected${1:__ComponentName__}Id} close={() => setComponentType(undefined)} componentType={ComponentTypeEnum.DETAILS} />}",
			"      </PDModal>",
			"    </ComponentContainer >",
			"  )",
			"}",
			""
		],
		"description": "Create Main Component"
	},
	"ComponentBase": {
		"prefix": "ccTypescript_ComponentBase",
		"body": [
			"import { Image } from '@aws-amplify/ui-react';",
			"import { Storage } from 'aws-amplify';",
			"import _ from 'lodash';",
			"import { nanoid } from 'nanoid';",
			"import React from 'react';",
			"import DatePicker from \"react-datepicker\";",
			"import \"react-datepicker/dist/react-datepicker.css\";",
			"import { useTranslation } from 'react-i18next';",
			"import Select from 'react-select';",
			"import styled from 'styled-components';",
			"import { Create${1:__ComponentName__}Input, Delete${1:__ComponentName__}Input, ${1:__ComponentName__}, Update${1:__ComponentName__}Input } from '../../API';",
			"import { ComponentTypeEnum } from '../../enums/componentEnum';",
			"import { PDButton } from '../../PuffinDesignSystem/PDButton';",
			"import { PDComponentContainerBase, PDComponentContentBase, PDComponentFooterBase, PDComponentHeaderBase, PDComponentItemBase } from '../../PuffinDesignSystem/PDComponentBase';",
			"import { PDInput } from '../../PuffinDesignSystem/PDInput';",
			"import { PDLabel } from '../../PuffinDesignSystem/PDLabel';",
			"import { useAppDispatch, useAppSelector } from '../../Redux/store';",
			"import { fetch${1:__ComponentName__}List } from './${1/^(.)(.*)$/${1:/downcase}${2}/}.slice';",
			"import { Selected${1:__ComponentName__} } from './${1/^(.)(.*)$/${1:/downcase}${2}/}';",
			"import { addNew${1:__ComponentName__}, delete${1:__ComponentName__}, update${1:__ComponentName__} } from './${1/^(.)(.*)$/${1:/downcase}${2}/}.slice';",
			"",
			"type ComponentProps = {",
			"  componentType: ComponentTypeEnum;",
			"  title: string;",
			"  selected${1:__ComponentName__}Id?: string;",
			"  close: () => void;",
			"}",
			"const ComponentContainer = styled(PDComponentContainerBase)`",
			"height: 800px;",
			"overflow: auto;",
			"`",
			"const HeaderSection = styled(PDComponentHeaderBase)``",
			"const ContentSection = styled(PDComponentContentBase)`",
			"  display: flex;",
			"  flex-wrap: wrap;",
			"`",
			"const ContentItem = styled(PDComponentItemBase)``",
			"const FooterSection = styled(PDComponentFooterBase)``",
			"",
			"export const ${1:__ComponentName__}BaseComponent = (props: ComponentProps) => {",
			"  const [original${1:__ComponentName__}, setOriginal${1:__ComponentName__}] = React.useState<${1:__ComponentName__}>();",
			"  const [${1/^(.)(.*)$/${1:/downcase}${2}/}Name, set${1:__ComponentName__}Name] = React.useState<string | null>();",
			"  const [address, setAddress] = React.useState<string | null>();",
			"  const [phone, setPhone] = React.useState<string | null>();",
			"  const [email, setEmail] = React.useState<string | null>();",
			"  const [description, setDescription] = React.useState<string | null>();",
			"  const [isEditing, setIsEditing] = React.useState<boolean>(false);",
			"  const [isDeleting, setIsDeleting] = React.useState<boolean>(false);",
			"  const dispatch = useAppDispatch()",
			"  const { t } = useTranslation();",
			"",
			"  const ${1/^(.)(.*)$/${1:/downcase}${2}/}List = useAppSelector(state => state.${1/^(.)(.*)$/${1:/downcase}${2}/}Slice.${1/^(.)(.*)$/${1:/downcase}${2}/}List);",
			"",
			"  React.useEffect(() => {",
			"",
			"    if (props.selected${1:__ComponentName__}Id) {",
			"      const original${1:__ComponentName__} = _.find(${1/^(.)(.*)$/${1:/downcase}${2}/}List, { id: props.selected${1:__ComponentName__}Id });",
			"      setOriginal${1:__ComponentName__}(original${1:__ComponentName__});",
			"    }",
			"  }, [${1/^(.)(.*)$/${1:/downcase}${2}/}List]);",
			"",
			"  React.useEffect(() => {",
			"    if (original${1:__ComponentName__}) {",
			"      reset${1:__ComponentName__}Info(original${1:__ComponentName__});",
			"    }",
			"  }, [original${1:__ComponentName__}]);",
			"",
			"",
			"  const reset${1:__ComponentName__}Info = (${1/^(.)(.*)$/${1:/downcase}${2}/}: ${1:__ComponentName__}) => {",
			"    set${1:__ComponentName__}Name(${1/^(.)(.*)$/${1:/downcase}${2}/}.${1/^(.)(.*)$/${1:/downcase}${2}/}Name);",
			"    setAddress(${1/^(.)(.*)$/${1:/downcase}${2}/}.address);",
			"    setPhone(${1/^(.)(.*)$/${1:/downcase}${2}/}.phone);",
			"    setEmail(${1/^(.)(.*)$/${1:/downcase}${2}/}.email);",
			"    setDescription(${1/^(.)(.*)$/${1:/downcase}${2}/}.description);",
			"  };",
			"",
			"",
			"",
			"  React.useEffect(() => {",
			"    if (!${1/^(.)(.*)$/${1:/downcase}${2}/}List.length) dispatch(fetch${1:__ComponentName__}List());",
			"  }, []);",
			"",
			"",
			"  const onButtonClick_create = () => {",
			"    const new${1:__ComponentName__}: Create${1:__ComponentName__}Input = {",
			"      ${1/^(.)(.*)$/${1:/downcase}${2}/}Name,",
			"      address,",
			"      phone,",
			"      email,",
			"      description,",
			"    }",
			"    dispatch(addNew${1:__ComponentName__}(new${1:__ComponentName__}));",
			"  };",
			"",
			"  const onButtonClick_update = () => {",
			"    const new${1:__ComponentName__}: Update${1:__ComponentName__}Input = {",
			"      id: props.selected${1:__ComponentName__}Id!,",
			"      ${1/^(.)(.*)$/${1:/downcase}${2}/}Name,",
			"      address,",
			"      phone,",
			"      email,",
			"      description",
			"    }",
			"    dispatch(update${1:__ComponentName__}(new${1:__ComponentName__}));",
			"    setIsEditing(false);",
			"  };",
			"",
			"  const onButtonClick_delete = () => {",
			"    const ${1:__ComponentName__}ToBeDeleted: Delete${1:__ComponentName__}Input = {",
			"      id: props.selected${1:__ComponentName__}Id!",
			"    }",
			"    dispatch(delete${1:__ComponentName__}(${1:__ComponentName__}ToBeDeleted));",
			"    props.close();",
			"  };",
			"  const onButtonClick_close = () => {",
			"    props.close();",
			"  };",
			"",
			"  return (",
			"    <ComponentContainer>",
			"      <HeaderSection>",
			"        {props.title} ({props.selected${1:__ComponentName__}Id})",
			"      </HeaderSection>",
			"      <ContentSection>",
			"        <ContentItem>",
			"          <PDLabel htmlFor='${1/^(.)(.*)$/${1:/downcase}${2}/}Name'>{t(\"${1/^(.)(.*)$/${1:/downcase}${2}/}.${1/^(.)(.*)$/${1:/downcase}${2}/}Name\")}</PDLabel>",
			"          <PDInput type=\"text\" id='${1/^(.)(.*)$/${1:/downcase}${2}/}Name' value={${1/^(.)(.*)$/${1:/downcase}${2}/}Name!} onChange={(e) => set${1:__ComponentName__}Name(e.target.value)} required disabled={props.componentType === ComponentTypeEnum.DETAILS && !isEditing} />",
			"        </ContentItem>",
			"      </ContentSection>",
			"",
			"      <FooterSection>",
			"        {/* 保存按钮 */}",
			"        {props.componentType === ComponentTypeEnum.CREATE && < PDButton onClick={onButtonClick_create}>{t('common.button.save')}</PDButton>}",
			"",
			"        {/* 编辑按钮 */}",
			"        {props.componentType === ComponentTypeEnum.DETAILS && !isEditing && !isDeleting && <PDButton onClick={() => setIsEditing(true)}>{t('common.button.edit')}</PDButton>}",
			"",
			"        {/* 更新按钮 */}",
			"        {props.componentType === ComponentTypeEnum.DETAILS && isEditing && !isDeleting && <PDButton onClick={onButtonClick_update}>{t('common.button.update')}</PDButton>}",
			"",
			"        {/* 取消按钮 */}",
			"        {props.componentType === ComponentTypeEnum.DETAILS && isEditing && !isDeleting && <PDButton onClick={() => { setIsEditing(false); reset${1:__ComponentName__}Info(original${1:__ComponentName__}!); }}>{t('common.button.cancel')}</PDButton>}",
			"        {/* <PDButton type='reset' onClick={onButtonClick_reset}>{t('common.button.reset')}</PDButton> */}",
			"",
			"        {props.componentType === ComponentTypeEnum.DETAILS && !isDeleting && !isEditing && <PDButton onClick={() => setIsDeleting(true)}>{t('common.button.delete')}</PDButton>}",
			"        {props.componentType === ComponentTypeEnum.DETAILS && isDeleting && !isEditing && < PDButton onClick={onButtonClick_delete}>{t('common.button.confirmDelete')}</PDButton>}",
			"        {props.componentType === ComponentTypeEnum.DETAILS && isDeleting && !isEditing && <PDButton onClick={() => setIsDeleting(false)}>{t('common.button.cancel')}</PDButton>}",
			"",
			"        {/* 关闭按钮 */}",
			"        {!isDeleting && !isEditing && <PDButton onClick={onButtonClick_close}>{t('common.button.close')}</PDButton>}",
			"",
			"      </FooterSection>",
			"    </ComponentContainer >",
			"  )",
			"",
			"}",
			""
		],
		"description": "create Base Component"
	}
}