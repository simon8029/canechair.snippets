{
	"NodeJS : Lib : autoCatch": {
		"prefix": "ccNodeJS_Lib_autoCatch",
		"body": [
			"module.exports = function autoCatch(handlers) {",
			"  return Object.keys(handlers).reduce((autoHandlers, key) => {",
			"    const handler = handlers[key];",
			"    autoHandlers[key] = (req, res, next) =>",
			"      Promise.resolve(handler(req, res, next)).catch(next);",
			"    return autoHandlers;",
			"  }, {});",
			"};",
			""
		],
		"description": "Create autoCatch function"
	},
	"NodeJS : API : List": {
		"prefix": "ccNodeJS_API_List",
		"body": [
			"async function list${1:__APIName__}(req, res) {",
			"  const { offset = 0, limit = 10 } = req.query;",
			"",
			"  try {",
			"    res.json(",
			"      await ${1:__APIName__}Service.list({",
			"        offset: Number(offset),",
			"        limit: Number(limit),",
			"      })",
			"    );",
			"  } catch (err) {",
			"    res.status(500).json({ error: err.message });",
			"  }",
			"}",
			""
		],
		"description": "Create NodeJS API for List"
	},
	"NodeJS : API : Get : FromFile": {
		"prefix": "ccNodeJS_API_Get_fromFile",
		"body": [
			"async function get${1/^(.)(.*)$/${1:/upcase}${2}/}(req, res, next) {",
			"  const { id } = req.params;",
			"",
			"  try {",
			"    const ${1:__ServiceName__} = await ${1/^(.)(.*)$/${1:/upcase}${2}/}Service.get(id);",
			"",
			"    if (!${1:__ServiceName__}) {",
			"      return next();",
			"    }",
			"",
			"    res.json(${1:__ServiceName__});",
			"  } catch (error) {",
			"    res.status(500).json({ error: error.message });",
			"  }",
			"}"
		],
		"description": "Create NodeJS API for Get"
	},
	"NodeJS : Service : List : FromFile": {
		"prefix": "ccNodeJS_Service_List_fromFile",
		"body": [
			"const fs = require(\"fs\").promises;",
			"const path = require(\"path\");",
			"",
			"const ${1:__ServiceName__}File = path.join(__dirname, \"./${1:__ServiceName__}s.json\");",
			"",
			"async function list({ offset = 0, limit = 10, filter }) {",
			"  const ${1:__ServiceName__} = await fs.readFile(${1:__ServiceName__}File);",
			"",
			"  return JSON.parse(${1:__ServiceName__})",
			"    .filter((item, i) => {",
			"      // TODO: Filter...",
			"      return true;",
			"    })",
			"    .slice(offset, offset + limit);",
			"}",
			"",
			"module.exports = { list };",
			""
		],
		"description": "Create NodeJS Service for List"
	},
	"NodeJS : Service : Get : fromFile": {
		"prefix": "ccNodeJS_Service_Get_fromFile",
		"body": [
			"async function get(id) {",
			"  const ${1:__ServiceName__}s = JSON.parse(await fs.readFile(${1:__ServiceName__}File));",
			"",
			"  const ${1:__ServiceName__} = ${1:__ServiceName__}s.filter((${1:__ServiceName__}, i) => {",
			"    return ${1:__ServiceName__}.id == id;",
			"  })[0];",
			"",
			"  return ${1:__ServiceName__};",
			"}"
		],
		"description": "Create NodeJS Service for Get"
	},
	"NodeJS : MiddleWare : HandleError": {
		"prefix": "ccNodeJS_MiddleWare_HandleError",
		"body": [
			"module.exports = function handleError(err, req, res, next) {",
			"  console.error(err);",
			"  if (res.headersSent) {",
			"    return next(err);",
			"  }",
			"",
			"  res.status(500).json({ error: \"Internal Error\" });",
			"};",
			""
		],
		"description": "Create middleware handleError"
	},
	"NodeJS : MiddleWare : NotFound": {
		"prefix": "ccNodeJS_MiddleWare_NotFound",
		"body": [
			"module.exports = function notFound(req, res) {",
			"  res.status(404).json({ error: \"Not Found.\" });",
			"};",
			""
		],
		"description": "Create middleware notFound"
	},
	"NodeJS : MiddleWare : Cors": {
		"prefix": "ccNodeJS_MiddleWare_Cors",
		"body": [
			"module.exports = function cors(req, res, next) {",
			"  const origin = req.headers.origin;",
			"",
			"  res.setHeader(\"Access-Control-Allow-Origin\", origin || \"*\");",
			"  res.setHeader(",
			"    \"Access-Control-Allow-Methods\",",
			"    \"POST, GET, PUT, DELETE, OPTIONS, XMODIFY\"",
			"  );",
			"  res.setHeader(\"Access-Control-Allow-Credentials\", \"true\");",
			"  res.setHeader(\"Access-Control-Max-Age\", \"86400\");",
			"  res.setHeader(",
			"    \"Access-Control-Allow-Headers\",",
			"    \"X-Requested-With, X-HTTP-Method-Override, Content-Type, Accept\"",
			"  );",
			"",
			"  next();",
			"};",
			""
		],
		"description": "Create Middleware Cors"
	},
	"NodeJS : ": {
		"prefix": "sdf",
		"body": [
			"const express = require(\"express\");",
			"const mongoose = require(\"mongoose\");",
			"const app = express();",
			"",
			"const routes = require(\"./routes\");",
			"",
			"app.use(express.json());",
			"",
			"app.get(\"/\", (req, res) => {",
			"  res.send(\"hello\");",
			"});",
			"app.use(\"/api\", routes);",
			"",
			"const mongoDB = process.env.MONGODB_URL || \"mongodb://localhost:27017/my_db\";",
			"mongoose.connect(mongoDB, { useNewUrlParser: true, useUnifiedTopology: true });",
			"const db = mongoose.connection;",
			"db.on(\"error\", console.error.bind(console, \"MongoDB connection error:\"));",
			"",
			"const PORT = process.env.PORT || 8139;",
			"app.listen(PORT, () => {",
			"  console.log(`Server in running on port ${PORT}`);",
			"});",
			""
		],
		"description": "sdf"
	},
	"NodeJS : MERN : Index.js": {
		"prefix": "ccNodeJS_MERN_Index.js",
		"body": [
			"import express from \"express\";",
			"import mongoose from \"mongoose\";",
			"import cors from \"cors\";",
			"",
			"import ${1:__ModuleName__}Routes from \"./${1:__ModuleName__}/${1:__ModuleName__}Routes.js\";",
			"import userRouter from \"./User/userRoutes.js\";",
			"",
			"const app = express();",
			"",
			"app.use(express.json({ limit: \"30mb\", extended: true }));",
			"app.use(express.urlencoded({ limit: \"30mb\", extended: true }));",
			"app.use(cors());",
			"",
			"app.use(\"/${1:__ModuleName__}s\", ${1:__ModuleName__}Routes);",
			"app.use(\"/user\", userRouter);",
			"",
			"const CONNECTION_URL = \"mongodb://localhost:27017/my_db\";",
			"const PORT = process.env.PORT || 8139;",
			"",
			"mongoose",
			"\t.connect(CONNECTION_URL, { useNewUrlParser: true, useUnifiedTopology: true })",
			"\t.then(() => app.listen(PORT, () => console.log(`Server is running on Port: http://localhost:\\${PORT}`)))",
			"\t.catch((error) => console.log(`\\${error} did not connect`));",
			"${0}"
		],
		"description": "Create MEAN index.js"
	},
	"NodeJS : MERN : Controller": {
		"prefix": "ccNodeJS_MERN_Controller",
		"body": [
			"import express from \"express\";",
			"import mongoose from \"mongoose\";",
			"",
			"import ${1:__ModuleName__} from \"./${1/^(.)(.*)$/${1:/downcase}${2}/}Model.js\";",
			"",
			"const router = express.Router();",
			"",
			"export const get${1:__ModuleName__}s = async (req, res) => {",
			"\tconst { offset, limit = 10 } = req.query;",
			"",
			"\ttry {",
			"\t\tconst startIndex = Number(offset) * limit;",
			"",
			"\t\tconst total = await ${1:__ModuleName__}.countDocuments({});",
			"\t\tconst ${1/^(.)(.*)$/${1:/downcase}${2}/}s = await ${1:__ModuleName__}.find().sort({ _id: -1 }).limit(limit).skip(startIndex);",
			"",
			"\t\tres.json({",
			"\t\t\tdata: ${1/^(.)(.*)$/${1:/downcase}${2}/}s,",
			"\t\t\tcurrentPage: Number(offset),",
			"\t\t\tnumberOfPages: Math.ceil(total / limit),",
			"\t\t});",
			"\t} catch (error) {",
			"\t\tres.status(404).json({ message: error.message });",
			"\t}",
			"};",
			"",
			"export const get${1:__ModuleName__}sByFilter = async (req, res) => {",
			"\tconst { filter, tags } = req.query;",
			"",
			"\ttry {",
			"\t\tconst name = new RegExp(filter, \"i\");",
			"",
			"\t\tconst ${1/^(.)(.*)$/${1:/downcase}${2}/}s = await ${1:__ModuleName__}.find({",
			"\t\t\t\\$or: [{ name }, { tags: { \\$in: tags.split(\",\") } }],",
			"\t\t});",
			"",
			"\t\tres.json({ data: ${1/^(.)(.*)$/${1:/downcase}${2}/}s });",
			"\t} catch (error) {",
			"\t\tres.status(404).json({ message: error.message });",
			"\t}",
			"};",
			"",
			"export const get${1:__ModuleName__} = async (req, res) => {",
			"\tconst { id } = req.params;",
			"",
			"\ttry {",
			"\t\tconst post = await ${1:__ModuleName__}.findById(id);",
			"",
			"\t\tres.status(200).json(post);",
			"\t} catch (error) {",
			"\t\tres.status(404).json({ message: error.message });",
			"\t}",
			"};",
			"",
			"export const create${1:__ModuleName__} = async (req, res) => {",
			"\tconst post = req.body;",
			"",
			"\tconst new${1:__ModuleName__} = new ${1:__ModuleName__}({",
			"\t\t...post,",
			"\t\tcreator: req.userId,",
			"\t\tcreatedAt: new Date().toISOString(),",
			"\t});",
			"",
			"\ttry {",
			"\t\tawait new${1:__ModuleName__}.save();",
			"",
			"\t\tres.status(201).json(new${1:__ModuleName__});",
			"\t} catch (error) {",
			"\t\tres.status(409).json({ message: error.message });",
			"\t}",
			"};",
			"",
			"export const update${1:__ModuleName__} = async (req, res) => {",
			"\tconst { id } = req.params;",
			"\tconst { name, description, tags } = req.body;",
			"",
			"\tif (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: \\${id}`);",
			"",
			"\tconst updated${1:__ModuleName__} = {",
			"\t\tname,",
			"\t\tdescription,",
			"\t\ttags,",
			"",
			"\t\t_id: id,",
			"\t};",
			"",
			"\tawait ${1:__ModuleName__}.findByIdAndUpdate(id, updated${1:__ModuleName__}, { new: true });",
			"",
			"\tres.json(updated${1:__ModuleName__});",
			"};",
			"",
			"export const delete${1:__ModuleName__} = async (req, res) => {",
			"\tconst { id } = req.params;",
			"",
			"\tif (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: \\${id}`);",
			"",
			"\tawait ${1:__ModuleName__}.findByIdAndRemove(id);",
			"",
			"\tres.json({ message: \"${1:__ModuleName__} deleted successfully.\" });",
			"};",
			"",
			"export const like${1:__ModuleName__} = async (req, res) => {",
			"\tconst { id } = req.params;",
			"",
			"\tif (!req.userId) {",
			"\t\treturn res.status(401).json({ message: \"Unauthenticated\" });",
			"\t}",
			"",
			"\tif (!mongoose.Types.ObjectId.isValid(id)) return res.status(404).send(`No post with id: \\${id}`);",
			"",
			"\tconst post = await ${1:__ModuleName__}.findById(id);",
			"",
			"\tconst index = post.likes.findIndex((id) => id === String(req.userId));",
			"",
			"\tif (index === -1) {",
			"\t\tpost.likes.push(req.userId);",
			"\t} else {",
			"\t\tpost.likes = post.likes.filter((id) => id !== String(req.userId));",
			"\t}",
			"",
			"\tconst updated${1:__ModuleName__} = await ${1:__ModuleName__}.findByIdAndUpdate(id, post, {",
			"\t\tnew: true,",
			"\t});",
			"",
			"\tres.status(200).json(updated${1:__ModuleName__});",
			"};",
			"",
			"export const comment${1:__ModuleName__} = async (req, res) => {",
			"\tconst { id } = req.params;",
			"\tconst { value } = req.body;",
			"",
			"\tconst post = await ${1:__ModuleName__}.findById(id);",
			"",
			"\tpost.comments.push(value);",
			"",
			"\tconst updated${1:__ModuleName__} = await ${1:__ModuleName__}.findByIdAndUpdate(id, post, {",
			"\t\tnew: true,",
			"\t});",
			"",
			"\tres.json(updated${1:__ModuleName__});",
			"};",
			"",
			"export default router;",
			""
		],
		"description": "Create MERN Controller"
	},
	"NodeJS : MERN : Model": {
		"prefix": "ccNodeJS_MERN_Model",
		"body": [
			"import mongoose from \"mongoose\";",
			"",
			"const ${1:__ModuleName__}Schema = mongoose.Schema({",
			"\tname: String,",
			"\tdescription: String,",
			"\ttags: [String],",
			"\tlikes: { type: [String], default: [] },",
			"\tcomments: { type: [String], default: [] },",
			"\tcreatedAt: {",
			"\t\ttype: Date,",
			"\t\tdefault: new Date(),",
			"\t},",
			"});",
			"",
			"var ${1/^(.)(.*)$/${1:/upcase}${2}/} = mongoose.model(\"${1/^(.)(.*)$/${1:/upcase}${2}/}\", ${1:__ModuleName__}Schema);",
			"",
			"export default ${1/^(.)(.*)$/${1:/upcase}${2}/};",
			""
		],
		"description": "Create MERN Model"
	},
	"NodeJS : MERN : Routes": {
		"prefix": "ccNodeJS_MERN_Routes",
		"body": [
			"import express from \"express\";",
			"",
			"import {",
			"\tget${1:__ModuleName__}s,",
			"\tget${1:__ModuleName__}sByFilter,",
			"\tget${1:__ModuleName__},",
			"\tcreate${1:__ModuleName__},",
			"\tupdate${1:__ModuleName__},",
			"\tlike${1:__ModuleName__},",
			"\tcomment${1:__ModuleName__},",
			"\tdelete${1:__ModuleName__},",
			"} from \"./${1/^(.)(.*)$/${1:/upcase}${2}/}Controller.js\";",
			"",
			"const router = express.Router();",
			"import auth from \"../Middleware/auth.js\";",
			"",
			"router.get(\"/\", get${1:__ModuleName__}s);",
			"router.get(\"/:id\", get${1:__ModuleName__});",
			"router.get(\"/search\", get${1:__ModuleName__}sByFilter);",
			"",
			"router.post(\"/\", auth, create${1:__ModuleName__});",
			"router.post(\"/:id/comment${1:__ModuleName__}\", comment${1:__ModuleName__});",
			"router.patch(\"/:id/like${1:__ModuleName__}\", auth, like${1:__ModuleName__});",
			"router.patch(\"/:id\", auth, update${1:__ModuleName__});",
			"router.delete(\"/:id\", auth, delete${1:__ModuleName__});",
			"",
			"export default router;",
			""
		],
		"description": "Create MERN Routes"
	},
	"NodeJS : MERN : UserController": {
		"prefix": "ccNodeJS_MERN_UserController",
		"body": [
			"import bcrypt from \"bcryptjs\";",
			"import jwt from \"jsonwebtoken\";",
			"",
			"import UserModal from \"./userModel.js\";",
			"",
			"const secret = \"secret123456\";",
			"",
			"export const signin = async (req, res) => {",
			"\tconst { email, password } = req.body;",
			"",
			"\ttry {",
			"\t\tconst oldUser = await UserModal.findOne({ email });",
			"",
			"\t\tif (!oldUser) return res.status(404).json({ message: \"User doesn't exist\" });",
			"",
			"\t\tconst isPasswordCorrect = await bcrypt.compare(password, oldUser.password);",
			"",
			"\t\tif (!isPasswordCorrect) return res.status(400).json({ message: \"Invalid credentials\" });",
			"",
			"\t\tconst token = jwt.sign({ email: oldUser.email, id: oldUser._id }, secret, {",
			"\t\t\texpiresIn: \"1h\",",
			"\t\t});",
			"",
			"\t\tres.status(200).json({ result: oldUser, token });",
			"\t} catch (err) {",
			"\t\tres.status(500).json({ message: \"Something went wrong\" });",
			"\t}",
			"};",
			"",
			"export const signup = async (req, res) => {",
			"\tconst { email, password, firstName, lastName } = req.body;",
			"",
			"\ttry {",
			"\t\tconst oldUser = await UserModal.findOne({ email });",
			"",
			"\t\tif (oldUser) return res.status(400).json({ message: \"User already exists\" });",
			"",
			"\t\tconst hashedPassword = await bcrypt.hash(password, 12);",
			"",
			"\t\tconst result = await UserModal.create({",
			"\t\t\temail,",
			"\t\t\tpassword: hashedPassword,",
			"\t\t\tname: `${firstName} ${lastName}`,",
			"\t\t});",
			"",
			"\t\tconst token = jwt.sign({ email: result.email, id: result._id }, secret, {",
			"\t\t\texpiresIn: \"1h\",",
			"\t\t});",
			"",
			"\t\tres.status(201).json({ result, token });",
			"\t} catch (error) {",
			"\t\tres.status(500).json({ message: \"Something went wrong\" });",
			"",
			"\t\tconsole.log(error);",
			"\t}",
			"};",
			""
		],
		"description": "Create MERN UserController"
	},
	"NodeJS : MERN : UserModel": {
		"prefix": "ccNodeJS_MERN_UserModel",
		"body": [
			"import mongoose from \"mongoose\";",
			"",
			"const userSchema = mongoose.Schema({",
			"\tname: { type: String, required: true },",
			"\temail: { type: String, required: true },",
			"\tpassword: { type: String, required: true },",
			"\tid: { type: String },",
			"});",
			"",
			"export default mongoose.model(\"User\", userSchema);",
			""
		],
		"description": "Create MERN UserModel"
	},
	"NodeJS : MERN : UserRoutes": {
		"prefix": "ccNodeJS_MERN_UserRoutes",
		"body": [
			"import express from \"express\";",
			"const router = express.Router();",
			"",
			"import { signin, signup } from \"./userController.js\";",
			"",
			"router.post(\"/signin\", signin);",
			"router.post(\"/signup\", signup);",
			"",
			"export default router;",
			""
		],
		"description": "Create MERN UserRoutes"
	},
	"NodeJS : MicroService : init": {
		"prefix": "ccNodeJS_MicroService_Init",
		"body": [
			"const express = require('express');",
			"const bodyparser = require('body-parser');",
			"const { randomBytes } = require('crypto');",
			"const cors = require('cors');",
			"const { default: axios } = require('axios');",
			"const app = express();",
			"app.use(bodyparser.json());",
			"app.use(cors())",
			"",
			"app.post('/events', (req, res) => {",
			"  console.log(`req.body:`, req.body);",
			"  res.send({});",
			"}",
			");",
			"",
			"app.listen(8139, () => {",
			"  console.log('Post service listening on 8139');",
			"}",
			");",
			""
		],
		"description": "create microservice init"
	}
}