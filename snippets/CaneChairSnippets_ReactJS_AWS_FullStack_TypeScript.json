{
	"ReactJS_AWS_TS_Index.tsx": {
		"prefix": "ccReactJS_AWS_TS_index.tsx",
		"body": [
			"import './index.css';",
			"import '@fontsource/roboto';",
			"",
			"import Amplify from 'aws-amplify';",
			"import React from 'react';",
			"import ReactDOM from 'react-dom';",
			"import { Provider as ReduxProvider } from 'react-redux';",
			"import { BrowserRouter } from 'react-router-dom';",
			"",
			"import App from './App';",
			"import config from './aws-exports';",
			"import { reduxStore } from './Redux/store';",
			"import reportWebVitals from './reportWebVitals';",
			"",
			"Amplify.configure(config);",
			"",
			"require('dotenv').config();",
			"",
			"ReactDOM.render(",
			"\t<ReduxProvider store={reduxStore}>",
			"\t\t<BrowserRouter>",
			"\t\t\t<App />",
			"\t\t</BrowserRouter>",
			"\t</ReduxProvider>,",
			"\tdocument.getElementById('root'),",
			");",
			"",
			"reportWebVitals();",
			""
		],
		"description": "Create index.tsx file"
	},
	"ReactJS_TS_ReduxStore.ts": {
		"prefix": "ccReactJS_AWS_TS_ReduxStore.ts",
		"body": [
			"import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';",
			"",
			"import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"",
			"// export default counterSlice.reducer;",
			"",
			"export const reduxStore = configureStore({",
			"\treducer: {},",
			"});",
			"",
			"export type RootState = ReturnType<typeof reduxStore.getState>;",
			"export type AppDispatch = typeof reduxStore.dispatch;",
			"export const useAppDispatch = () => useDispatch<AppDispatch>();",
			"export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;",
			""
		],
		"description": "Create a Redux Store file."
	},
	"ReactJS_AWS_TS_ReduxStore.ts_withExample": {
		"prefix": "ccReactJS_AWS_TS_ReduxStore.ts_withExample",
		"body": [
			"import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';",
			"",
			"import { configureStore, createSlice, PayloadAction } from '@reduxjs/toolkit';",
			"",
			"type CounterStateType = {",
			"\tvalue: number;",
			"};",
			"",
			"const initialCounterState = { value: 0 } as CounterStateType;",
			"",
			"const counterSlice = createSlice({",
			"\tname: 'counter',",
			"\tinitialState: initialCounterState,",
			"\treducers: {",
			"\t\tincrement(state: { value: number }) {",
			"\t\t\tstate.value++;",
			"\t\t},",
			"\t\tdecrement(state: { value: number }) {",
			"\t\t\tstate.value--;",
			"\t\t},",
			"\t\tincrementByAmount(state: { value: number }, action: PayloadAction<number>) {",
			"\t\t\tstate.value += action.payload;",
			"\t\t},",
			"\t},",
			"});",
			"",
			"export const { increment, decrement, incrementByAmount } = counterSlice.actions;",
			"// export default counterSlice.reducer;",
			"",
			"export const reduxStore = configureStore({",
			"\treducer: {",
			"\t\tcounter: counterSlice.reducer,",
			"\t},",
			"});",
			"",
			"export type RootState = ReturnType<typeof reduxStore.getState>;",
			"export type AppDispatch = typeof reduxStore.dispatch;",
			"export const useAppDispatch = () => useDispatch<AppDispatch>();",
			"export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;",
			""
		],
		"description": "Create a Redux Store file with example"
	},
	"ReactJS_AWS_TS_Component_BasicCRUD": {
		"prefix": "ccReactJS_AWS_TS_BasicCRUDComponent",
		"body": [
			"import React, { useEffect } from \"react\";",
			"import styled from \"styled-components\";",
			"",
			"import {",
			"  Box,",
			"  Button,",
			"  IconButton,",
			"  Table,",
			"  TableBody,",
			"  TableCell,",
			"  TableHead,",
			"  TableRow,",
			"  TextField,",
			"  Typography,",
			"} from \"@mui/material\";",
			"import AddIcon from \"@mui/icons-material/Add\";",
			"import EditIcon from \"@mui/icons-material/Edit\";",
			"import DeleteIcon from \"@mui/icons-material/DeleteOutlined\";",
			"import SaveIcon from \"@mui/icons-material/Save\";",
			"import CancelIcon from \"@mui/icons-material/Close\";",
			"import {",
			"  ${1:__ComponentName__},",
			"  Create${1:__ComponentName__}Input,",
			"  Update${1:__ComponentName__}Input,",
			"} from \"../../API\";",
			"import { useAppDispatch, useAppSelector } from \"../../Redux/store\";",
			"import {",
			"  addNew${1:__ComponentName__},",
			"  delete${1:__ComponentName__},",
			"  fetch${1:__ComponentName__}List,",
			"  update${1:__ComponentName__},",
			"} from \"./${1/^(.)(.*)$/${1:/downcase}${2}/}Slice\";",
			"",
			"interface ${1:__ComponentName__}ManagementProps {}",
			"",
			"export const ${1:__ComponentName__}Management = (",
			"  props: ${1:__ComponentName__}ManagementProps",
			") => {",
			"  const [enabledRow, setEnabledRow] = React.useState<any>();",
			"  const [${1/^(.)(.*)$/${1:/downcase}${2}/}Name, set${1:__ComponentName__}Name] =",
			"    React.useState<string>(\"\");",
			"",
			"  const [${1/^(.)(.*)$/${1:/downcase}${2}/}Description, set${1:__ComponentName__}Description] =",
			"    React.useState<string>(\"\");",
			"  const [",
			"    currentEditing${1:__ComponentName__}Name,",
			"    setCurrentEditing${1:__ComponentName__}Name,",
			"  ] = React.useState<string>(\"\");",
			"  const [",
			"    currentEditing${1:__ComponentName__}Description,",
			"    setCurrentEditing${1:__ComponentName__}Description,",
			"  ] = React.useState<string>(\"\");",
			"  const ${1/^(.)(.*)$/${1:/downcase}${2}/}List = useAppSelector(",
			"    (state) => state.recipe.${1/^(.)(.*)$/${1:/downcase}${2}/}List",
			"  );",
			"  const dispatch = useAppDispatch();",
			"",
			"  useEffect(() => {",
			"    if (${1/^(.)(.*)$/${1:/downcase}${2}/}List.length === 0) {",
			"      dispatch(fetch${1:__ComponentName__}List());",
			"    }",
			"  }, []); // eslint-disable-line react-hooks/exhaustive-deps",
			"",
			"  const onButtonClick_save = (item: Update${1:__ComponentName__}Input) => {",
			"    const input: Update${1:__ComponentName__}Input = {",
			"      id: item.id,",
			"      ${1/^(.)(.*)$/${1:/downcase}${2}/}Name: currentEditing${1:__ComponentName__}Name,",
			"      ${1/^(.)(.*)$/${1:/downcase}${2}/}Description: currentEditing${1:__ComponentName__}Description,",
			"    };",
			"    dispatch(update${1:__ComponentName__}(input));",
			"",
			"    setEnabledRow(undefined);",
			"    setCurrentEditing${1:__ComponentName__}Name(\"\");",
			"    setCurrentEditing${1:__ComponentName__}Description(\"\");",
			"  };",
			"",
			"  const onButtonClick_Add = () => {",
			"    const newIngredient: Create${1:__ComponentName__}Input = {",
			"      ${1/^(.)(.*)$/${1:/downcase}${2}/}Name,",
			"      ${1/^(.)(.*)$/${1:/downcase}${2}/}Description,",
			"    };",
			"    dispatch(addNew${1:__ComponentName__}(newIngredient));",
			"    set${1:__ComponentName__}Name(\"\");",
			"    set${1:__ComponentName__}Description(\"\");",
			"  };",
			"",
			"  const onButtonClick_modify = (row: any) => {",
			"    setEnabledRow(row);",
			"    setCurrentEditing${1:__ComponentName__}Name(row.${1/^(.)(.*)$/${1:/downcase}${2}/}Name);",
			"    setCurrentEditing${1:__ComponentName__}Description(row.${1/^(.)(.*)$/${1:/downcase}${2}/}Description);",
			"  };",
			"",
			"  const onButtonClick_delete = (id: string) => {",
			"    dispatch(delete${1:__ComponentName__}({ id }));",
			"  };",
			"",
			"  const onButtonClick_cancel = () => {",
			"    setEnabledRow(undefined);",
			"  };",
			"",
			"  return (",
			"    <Box>",
			"      <Box>",
			"        <Typography variant=\"h5\" p={3}>",
			"          ${1:__ComponentName__} Management",
			"        </Typography>",
			"        <Box sx={{ display: \"flex\", gap: 1, p: 2, m: 1 }}>",
			"          <TextField",
			"            label=\"Name\"",
			"            required",
			"            variant=\"outlined\"",
			"            value={${1/^(.)(.*)$/${1:/downcase}${2}/}Name}",
			"            onChange={(e) => set${1:__ComponentName__}Name(e.target.value)}",
			"            size=\"small\"",
			"          ></TextField>",
			"          <TextField",
			"            label=\"Description\"",
			"            variant=\"outlined\"",
			"            value={${1/^(.)(.*)$/${1:/downcase}${2}/}Description}",
			"            onChange={(e) => set${1:__ComponentName__}Description(e.target.value)}",
			"            size=\"small\"",
			"          ></TextField>",
			"          <Button",
			"            sx={{ width: 80 }}",
			"            color=\"primary\"",
			"            variant=\"contained\"",
			"            startIcon={<AddIcon />}",
			"            onClick={onButtonClick_Add}",
			"            disabled={!${1/^(.)(.*)$/${1:/downcase}${2}/}Name}",
			"          >",
			"            Add",
			"          </Button>",
			"        </Box>",
			"      </Box>",
			"      <Box sx={{ m: 1, p: 2, mt: 5 }}>",
			"        <Table>",
			"          <TableHead>",
			"            <TableRow>",
			"              <TableCell>Name</TableCell>",
			"              <TableCell>Description</TableCell>",
			"              <TableCell>Edit</TableCell>",
			"            </TableRow>",
			"          </TableHead>",
			"          <TableBody>",
			"            {${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((item: ${1:__ComponentName__}) => {",
			"              if (enabledRow !== item) {",
			"                return (",
			"                  <TableRow key={item.id}>",
			"                    <TableCell>{item.${1/^(.)(.*)$/${1:/downcase}${2}/}Name}</TableCell>",
			"                    <TableCell>{item.${1/^(.)(.*)$/${1:/downcase}${2}/}Description}</TableCell>",
			"                    <TableCell>",
			"                      <IconButton",
			"                        color=\"primary\"",
			"                        onClick={() => onButtonClick_modify(item)}",
			"                      >",
			"                        <EditIcon />",
			"                      </IconButton>",
			"                      <IconButton",
			"                        color=\"secondary\"",
			"                        onClick={() => onButtonClick_delete(item.id)}",
			"                      >",
			"                        <DeleteIcon />",
			"                      </IconButton>",
			"                    </TableCell>",
			"                  </TableRow>",
			"                );",
			"              } else {",
			"                return (",
			"                  <TableRow key={item.id}>",
			"                    <TableCell>",
			"                      <TextField",
			"                        label=\"Name\"",
			"                        value={currentEditing${1:__ComponentName__}Name}",
			"                        onChange={(e) =>",
			"                          setCurrentEditing${1:__ComponentName__}Name(e.target.value)",
			"                        }",
			"                        size=\"small\"",
			"                      ></TextField>",
			"                    </TableCell>",
			"                    <TableCell>",
			"                      <TextField",
			"                        label=\"Description\"",
			"                        value={currentEditing${1:__ComponentName__}Description}",
			"                        onChange={(e) =>",
			"                          setCurrentEditing${1:__ComponentName__}Description(",
			"                            e.target.value",
			"                          )",
			"                        }",
			"                        size=\"small\"",
			"                      ></TextField>",
			"                    </TableCell>",
			"                    <TableCell>",
			"                      <IconButton",
			"                        type=\"submit\"",
			"                        color=\"primary\"",
			"                        onClick={() => onButtonClick_save(item)}",
			"                      >",
			"                        <SaveIcon />",
			"                      </IconButton>",
			"                      <IconButton",
			"                        color=\"secondary\"",
			"                        onClick={onButtonClick_cancel}",
			"                      >",
			"                        <CancelIcon />",
			"                      </IconButton>",
			"                    </TableCell>",
			"                  </TableRow>",
			"                );",
			"              }",
			"            })}",
			"          </TableBody>",
			"        </Table>",
			"      </Box>",
			"    </Box>",
			"  );",
			"};",
			""
		],
		"description": "Create a Component with basic CRUD"
	},
	"ReactJS_AWS_TS_Redux_Slice": {
		"prefix": "ccReactJS_AWS_TS_Redux_Slice",
		"body": [
			"import {",
			"\tCreate${1:__ModelName__}Input,",
			"\tDelete${1:__ModelName__}Input,",
			"\tUpdate${1:__ModelName__}Input,",
			"\t${1:__ModelName__}",
			"} from '../../API';",
			"import { API, graphqlOperation } from 'aws-amplify';",
			"",
			"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';",
			"",
			"import * as mutations from '../graphql/mutations';",
			"import * as queries from '../graphql/queries';",
			"",
			"let original${1:__ModelName__} = ''; ",
			"interface SliceState {",
			"\t${1/^(.)(.*)$/${1:/downcase}${2}/}List: ${1:__ModelName__}[];",
			"\tstatus: 'loading' | 'idle';",
			"\terror: string | null;",
			"}",
			"",
			"const initialState: SliceState = {",
			"\t${1/^(.)(.*)$/${1:/downcase}${2}/}List: [],",
			"\terror: null,",
			"\tstatus: 'idle',",
			"};",
			"",
			"export const fetch${1:__ModelName__}List = createAsyncThunk(",
			"\t'${1:__ModelName__}/fetch${1:__ModelName__}List',",
			"\tasync () => {",
			"\t\tconst response = (await API.graphql(",
			"\t\t\tgraphqlOperation(queries.list${1:__ModelName__}s),",
			"\t\t)) as any;",
			"",
			"\t\treturn response.data.list${1:__ModelName__}s;",
			"\t},",
			");",
			"",
			"export const addNew${1:__ModelName__} = createAsyncThunk(",
			"\t'${1:__ModelName__}/addNew${1:__ModelName__}',",
			"\tasync (input: Create${1:__ModelName__}Input, { rejectWithValue }) => {",
			"\t\ttry {",
			"\t\t\tconst response = (await API.graphql(",
			"\t\t\t\tgraphqlOperation(mutations.create${1:__ModelName__}, { input }),",
			"\t\t\t)) as any;",
			"\t\t\treturn response.data.create${1:__ModelName__};",
			"\t\t} catch (err: any) {",
			"\t\t\tconsole.error(`err:`, err);",
			"\t\t\treturn rejectWithValue(err.response.data);",
			"\t\t}",
			"\t},",
			");",
			"",
			"export const update${1:__ModelName__} = createAsyncThunk(",
			"\t'${1:__ModelName__}s/update${1:__ModelName__}',",
			"\tasync (input: Update${1:__ModelName__}Input, { rejectWithValue }) => {",
			"\t\ttry {",
			"\t\t\tconst response = (await API.graphql(",
			"\t\t\t\tgraphqlOperation(mutations.update${1:__ModelName__}, { input }),",
			"\t\t\t)) as any;",
			"\t\t\treturn response.data.update${1:__ModelName__};",
			"\t\t} catch (err: any) {",
			"\t\t\tconsole.error(`err:`, err);",
			"\t\t\treturn rejectWithValue(err.response.data);",
			"\t\t}",
			"\t},",
			");",
			"",
			"export const delete${1:__ModelName__} = createAsyncThunk(",
			"\t'${1:__ModelName__}s/delete${1:__ModelName__}',",
			"\tasync (id: Delete${1:__ModelName__}Input, { rejectWithValue }) => {",
			"\t\ttry {",
			"\t\t\tconst response = (await API.graphql(",
			"\t\t\t\tgraphqlOperation(mutations.delete${1:__ModelName__}, { input: id }),",
			"\t\t\t)) as any;",
			"\t\t\treturn response.data.delete${1:__ModelName__};",
			"\t\t} catch (err: any) {",
			"\t\t\tconsole.error(`err:`, err);",
			"\t\t\treturn rejectWithValue(err.response.data);",
			"\t\t}",
			"\t},",
			");",
			"",
			"const ${1/^(.)(.*)$/${1:/downcase}${2}/}Slice = createSlice({",
			"\tname: '${1/^(.)(.*)$/${1:/downcase}${2}/}',",
			"\tinitialState,",
			"\treducers: {},",
			"\textraReducers: (builder) => {",
			"\t\tbuilder",
			"\t\t\t.addCase(fetch${1:__ModelName__}List.pending, (state) => {",
			"\t\t\t\tstate.status = 'loading';",
			"\t\t\t})",
			"\t\t\t.addCase(fetch${1:__ModelName__}List.fulfilled, (state, action) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = [];",
			"\t\t\t\taction.payload.items.map((item: ${1:__ModelName__}) => {",
			"\t\t\t\t\treturn state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.push(item);",
			"\t\t\t\t});",
			"\t\t\t\tstate.status = 'idle';",
			"\t\t\t})",
			"\t\t\t.addCase(fetch${1:__ModelName__}List.rejected, (rejectedInfo) => {})",
			"\t\t\t.addCase(addNew${1:__ModelName__}.pending, (state) => {",
			"\t\t\t\tstate.status = 'loading';",
			"\t\t\t})",
			"\t\t\t.addCase(addNew${1:__ModelName__}.fulfilled, (state, action) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List.push(action.payload);",
			"\t\t\t\tstate.status = 'idle';",
			"\t\t\t})",
			"\t\t\t.addCase(addNew${1:__ModelName__}.rejected, (rejectedInfo) => {})",
			"\t\t\t.addCase(update${1:__ModelName__}.pending, (state, action: any) => {",
			"\t\t\t\tstate.status = 'loading';",
			"\t\t\t\toriginal${1:__ModelName__} = JSON.stringify(",
			"\t\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List.find((item) => {",
			"\t\t\t\t\t\treturn item.id === action.meta.arg.id;",
			"\t\t\t\t\t}),",
			"\t\t\t\t);",
			"",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((item) => {",
			"\t\t\t\t\tif (item.id === action.meta.arg.id) {",
			"\t\t\t\t\t\titem = { ...JSON.parse(original${1:__ModelName__}), ...action.meta.arg };",
			"\t\t\t\t\t}",
			"\t\t\t\t\treturn item;",
			"\t\t\t\t});",
			"\t\t\t})",
			"\t\t\t.addCase(update${1:__ModelName__}.fulfilled, (state, action: any) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((item) => {",
			"\t\t\t\t\tif (item.id === action.meta.arg.id) {",
			"\t\t\t\t\t\titem = action.payload;",
			"\t\t\t\t\t}",
			"\t\t\t\t\treturn item;",
			"\t\t\t\t});",
			"\t\t\t\tstate.status = 'idle';",
			"\t\t\t})",
			"\t\t\t.addCase(update${1:__ModelName__}.rejected, (state, action: any) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.map((item) => {",
			"\t\t\t\t\tif (item.id === JSON.parse(original${1:__ModelName__}).id) {",
			"\t\t\t\t\t\titem = JSON.parse(original${1:__ModelName__});",
			"\t\t\t\t\t}",
			"\t\t\t\t\treturn item;",
			"\t\t\t\t});",
			"\t\t\t})",
			"\t\t\t.addCase(delete${1:__ModelName__}.pending, (state) => {",
			"\t\t\t\tstate.status = 'loading';",
			"\t\t\t})",
			"\t\t\t.addCase(delete${1:__ModelName__}.fulfilled, (state, action) => {",
			"\t\t\t\tstate.${1/^(.)(.*)$/${1:/downcase}${2}/}List = state.${1/^(.)(.*)$/${1:/downcase}${2}/}List.filter(",
			"\t\t\t\t\t(item) => item.id !== action.meta.arg.id,",
			"\t\t\t\t);",
			"\t\t\t\tstate.status = 'idle';",
			"\t\t\t})",
			"\t\t\t.addCase(delete${1:__ModelName__}.rejected, (state, rejectedInfo) => {});",
			"\t},",
			"});",
			"export default ${1/^(.)(.*)$/${1:/downcase}${2}/}Slice.reducer;",
			""
		],
		"description": "Create a Redux Slice file"
	}
}
