{
	"GoogleCloud : Functions : GeneralCrudApi": {
		"prefix": "ccGC_Functions_GeneralCrudApi",
		"body": [
			"const { db } = require('../util/admin');",
			"",
			"exports.getAll${1:__EntityName__}s = (request, response) => {",
			"\tdb.collection('${1/^(.)(.*)$/${1:/downcase}${2}/}s')",
			"\t\t.where('username', '==', request.user.username)",
			"\t\t.orderBy('createdAt', 'desc')",
			"\t\t.get()",
			"\t\t.then((data) => {",
			"\t\t\tlet ${1/^(.)(.*)$/${1:/downcase}${2}/}s = [];",
			"\t\t\tdata.forEach((doc) => {",
			"\t\t\t\t${1/^(.)(.*)$/${1:/downcase}${2}/}s.push({",
			"\t\t\t\t\t${1/^(.)(.*)$/${1:/downcase}${2}/}Id: doc.id,",
			"// Todo: Entity details to be populated here.",
			"\t\t\t\t\tcreatedAt: doc.data().createdAt,",
			"\t\t\t\t});",
			"\t\t\t});",
			"",
			"\t\t\treturn response.json(${1/^(.)(.*)$/${1:/downcase}${2}/}s);",
			"\t\t})",
			"\t\t.catch((error) => {",
			"\t\t\treturn response.status(500).json({ error });",
			"\t\t});",
			"};",
			"",
			"exports.getOne${1:__EntityName__} = (request, response) => {",
			"\tconst document = db.doc(`/${1/^(.)(.*)$/${1:/downcase}${2}/}s/${request.params.${1/^(.)(.*)$/${1:/downcase}${2}/}Id}`);",
			"\tdocument",
			"\t\t.get()",
			"\t\t.then((doc) => {",
			"\t\t\tif (!doc.exists) {",
			"\t\t\t\treturn response.status(404).json({ error: 'Not found' });",
			"\t\t\t}",
			"",
			"\t\t\tif (doc.data().username !== request.user.username) {",
			"\t\t\t\treturn response.status(403).json({ error: 'UnAuthorized!!!' });",
			"\t\t\t}",
			"",
			"\t\t\tlet ${1/^(.)(.*)$/${1:/downcase}${2}/}Data;",
			"\t\t\t${1/^(.)(.*)$/${1:/downcase}${2}/}Data = doc.data();",
			"\t\t\t${1/^(.)(.*)$/${1:/downcase}${2}/}Data.${1/^(.)(.*)$/${1:/downcase}${2}/}Id = doc.id;",
			"",
			"\t\t\treturn response.json(${1/^(.)(.*)$/${1:/downcase}${2}/}Data);",
			"\t\t})",
			"\t\t.catch((error) => {",
			"\t\t\treturn response.status(500).json({ error: error.code });",
			"\t\t});",
			"};",
			"",
			"exports.postOne${1:__EntityName__} = (request, response) => {",
			"\tconst new${1:__EntityName__}Item = {",
			"// Todo: Item details to be added here.",
			"\t\tcreatedAt: new Date().toISOString(),",
			"\t\tusername: request.user.username,",
			"\t};",
			"",
			"\tdb.collection('${1/^(.)(.*)$/${1:/downcase}${2}/}s')",
			"\t\t.add(new${1:__EntityName__}Item)",
			"\t\t.then((doc) => {",
			"\t\t\tconst response${1:__EntityName__}Item = new${1:__EntityName__}Item;",
			"\t\t\tresponse${1:__EntityName__}Item.id = doc.id;",
			"\t\t\treturn response.json(response${1:__EntityName__}Item);",
			"\t\t})",
			"\t\t.catch((err) => {",
			"\t\t\tresponse.status(500).json({ error: 'Somethingwent wrong' });",
			"\t\t});",
			"};",
			"",
			"exports.edit${1:__EntityName__} = (request, response) => {",
			"\tif (request.body.${1/^(.)(.*)$/${1:/downcase}${2}/}Id || request.body.createdAt) {",
			"\t\tresponse.status(403).json({ message: 'Not allowed to edit' });",
			"\t}",
			"",
			"\tlet document = db.collection('${1/^(.)(.*)$/${1:/downcase}${2}/}s').doc(`${request.params.${1/^(.)(.*)$/${1:/downcase}${2}/}Id}`);",
			"\tdocument",
			"\t\t.update(request.body)",
			"\t\t.then(() => {",
			"\t\t\tresponse.json({ message: 'Update successfully' });",
			"\t\t})",
			"\t\t.catch((err) => {",
			"\t\t\treturn response.status(500).json({ error});",
			"\t\t});",
			"};",
			"",
			"exports.delete${1:__EntityName__} = (request, response) => {",
			"\tconst document = db.doc(`/${1/^(.)(.*)$/${1:/downcase}${2}/}s/${request.params.${1/^(.)(.*)$/${1:/downcase}${2}/}Id}`);",
			"\tdocument",
			"\t\t.get()",
			"\t\t.then((doc) => {",
			"\t\t\tif (!doc.exists) {",
			"\t\t\t\treturn response.status(400).json({ error: 'Not found.' });",
			"\t\t\t}",
			"",
			"\t\t\tif (doc.data().username !== request.user.username) {",
			"\t\t\t\treturn response.status(403).json({ error: 'UnAuthorized.' });",
			"\t\t\t}",
			"",
			"\t\t\treturn document.delete();",
			"\t\t})",
			"\t\t.then(() => {",
			"\t\t\tresponse.json({ message: 'Delete successful.' });",
			"\t\t})",
			"\t\t.catch((err) => {",
			"\t\t\treturn response.status(500).json({ error });",
			"\t\t});",
			"};",
			""
		]
	}
}
